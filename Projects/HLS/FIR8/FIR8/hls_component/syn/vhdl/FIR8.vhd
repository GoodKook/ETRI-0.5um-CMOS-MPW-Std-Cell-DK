-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FIR8 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y : OUT STD_LOGIC_VECTOR (15 downto 0);
    y_ap_vld : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of FIR8 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "FIR8_FIR8,hls_ip_2025_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a100t-csg324-2I,HLS_INPUT_CLOCK=1000.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.570000,HLS_SYN_LAT=27,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=143,HLS_SYN_LUT=340,HLS_VERSION=2025_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv16_2AF8 : STD_LOGIC_VECTOR (15 downto 0) := "0010101011111000";
    constant ap_const_lv16_D508 : STD_LOGIC_VECTOR (15 downto 0) := "1101010100001000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv10_AB : STD_LOGIC_VECTOR (9 downto 0) := "0010101011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal shift_reg_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal shift_reg_ce0 : STD_LOGIC;
    signal shift_reg_we0 : STD_LOGIC;
    signal shift_reg_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_ce1 : STD_LOGIC;
    signal shift_reg_we1 : STD_LOGIC;
    signal shift_reg_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_read_reg_118 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_ap_start : STD_LOGIC;
    signal grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_ap_done : STD_LOGIC;
    signal grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_ap_idle : STD_LOGIC;
    signal grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_ap_ready : STD_LOGIC;
    signal grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_shift_reg_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_shift_reg_ce0 : STD_LOGIC;
    signal grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_shift_reg_we0 : STD_LOGIC;
    signal grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_shift_reg_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_shift_reg_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_shift_reg_ce1 : STD_LOGIC;
    signal grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_shift_reg_we1 : STD_LOGIC;
    signal grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_shift_reg_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_FIR8_Pipeline_MACC_LOOP_fu_71_ap_start : STD_LOGIC;
    signal grp_FIR8_Pipeline_MACC_LOOP_fu_71_ap_done : STD_LOGIC;
    signal grp_FIR8_Pipeline_MACC_LOOP_fu_71_ap_idle : STD_LOGIC;
    signal grp_FIR8_Pipeline_MACC_LOOP_fu_71_ap_ready : STD_LOGIC;
    signal grp_FIR8_Pipeline_MACC_LOOP_fu_71_acc_1_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_FIR8_Pipeline_MACC_LOOP_fu_71_acc_1_out_ap_vld : STD_LOGIC;
    signal grp_FIR8_Pipeline_MACC_LOOP_fu_71_shift_reg_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_FIR8_Pipeline_MACC_LOOP_fu_71_shift_reg_ce0 : STD_LOGIC;
    signal grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_FIR8_Pipeline_MACC_LOOP_fu_71_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal acc_fu_89_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln86_fu_83_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1_fu_95_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln86_fu_105_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component FIR8_FIR8_Pipeline_SHIFTER_LOOP IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (7 downto 0);
        shift_reg_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        shift_reg_ce0 : OUT STD_LOGIC;
        shift_reg_we0 : OUT STD_LOGIC;
        shift_reg_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        shift_reg_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        shift_reg_ce1 : OUT STD_LOGIC;
        shift_reg_we1 : OUT STD_LOGIC;
        shift_reg_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        shift_reg_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component FIR8_FIR8_Pipeline_MACC_LOOP IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        acc_1_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        acc_1_out_ap_vld : OUT STD_LOGIC;
        shift_reg_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        shift_reg_ce0 : OUT STD_LOGIC;
        shift_reg_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component FIR8_shift_reg_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    shift_reg_U : component FIR8_shift_reg_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => shift_reg_address0,
        ce0 => shift_reg_ce0,
        we0 => shift_reg_we0,
        d0 => grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_shift_reg_d0,
        q0 => shift_reg_q0,
        address1 => grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_shift_reg_address1,
        ce1 => shift_reg_ce1,
        we1 => shift_reg_we1,
        d1 => grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_shift_reg_d1,
        q1 => shift_reg_q1);

    grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63 : component FIR8_FIR8_Pipeline_SHIFTER_LOOP
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_ap_start,
        ap_done => grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_ap_done,
        ap_idle => grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_ap_idle,
        ap_ready => grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_ap_ready,
        x => x_read_reg_118,
        shift_reg_address0 => grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_shift_reg_address0,
        shift_reg_ce0 => grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_shift_reg_ce0,
        shift_reg_we0 => grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_shift_reg_we0,
        shift_reg_d0 => grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_shift_reg_d0,
        shift_reg_address1 => grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_shift_reg_address1,
        shift_reg_ce1 => grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_shift_reg_ce1,
        shift_reg_we1 => grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_shift_reg_we1,
        shift_reg_d1 => grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_shift_reg_d1,
        shift_reg_q1 => shift_reg_q1);

    grp_FIR8_Pipeline_MACC_LOOP_fu_71 : component FIR8_FIR8_Pipeline_MACC_LOOP
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_FIR8_Pipeline_MACC_LOOP_fu_71_ap_start,
        ap_done => grp_FIR8_Pipeline_MACC_LOOP_fu_71_ap_done,
        ap_idle => grp_FIR8_Pipeline_MACC_LOOP_fu_71_ap_idle,
        ap_ready => grp_FIR8_Pipeline_MACC_LOOP_fu_71_ap_ready,
        acc_1_out => grp_FIR8_Pipeline_MACC_LOOP_fu_71_acc_1_out,
        acc_1_out_ap_vld => grp_FIR8_Pipeline_MACC_LOOP_fu_71_acc_1_out_ap_vld,
        shift_reg_address0 => grp_FIR8_Pipeline_MACC_LOOP_fu_71_shift_reg_address0,
        shift_reg_ce0 => grp_FIR8_Pipeline_MACC_LOOP_fu_71_shift_reg_ce0,
        shift_reg_q0 => shift_reg_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_FIR8_Pipeline_MACC_LOOP_fu_71_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_FIR8_Pipeline_MACC_LOOP_fu_71_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_FIR8_Pipeline_MACC_LOOP_fu_71_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_FIR8_Pipeline_MACC_LOOP_fu_71_ap_ready = ap_const_logic_1)) then 
                    grp_FIR8_Pipeline_MACC_LOOP_fu_71_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_ap_ready = ap_const_logic_1)) then 
                    grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                x_read_reg_118 <= x;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_ap_done, grp_FIR8_Pipeline_MACC_LOOP_fu_71_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_FIR8_Pipeline_MACC_LOOP_fu_71_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    acc_fu_89_p2 <= std_logic_vector(unsigned(grp_FIR8_Pipeline_MACC_LOOP_fu_71_acc_1_out) + unsigned(ap_const_lv16_D508));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_ap_done)
    begin
        if ((grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_FIR8_Pipeline_MACC_LOOP_fu_71_ap_done)
    begin
        if ((grp_FIR8_Pipeline_MACC_LOOP_fu_71_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_FIR8_Pipeline_MACC_LOOP_fu_71_ap_start <= grp_FIR8_Pipeline_MACC_LOOP_fu_71_ap_start_reg;
    grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_ap_start <= grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_ap_start_reg;
    icmp_ln86_fu_83_p2 <= "1" when (unsigned(grp_FIR8_Pipeline_MACC_LOOP_fu_71_acc_1_out) < unsigned(ap_const_lv16_2AF8)) else "0";
    select_ln86_fu_105_p3 <= 
        ap_const_lv10_AB when (icmp_ln86_fu_83_p2(0) = '1') else 
        trunc_ln1_fu_95_p4;

    shift_reg_address0_assign_proc : process(grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_shift_reg_address0, grp_FIR8_Pipeline_MACC_LOOP_fu_71_shift_reg_address0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            shift_reg_address0 <= grp_FIR8_Pipeline_MACC_LOOP_fu_71_shift_reg_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shift_reg_address0 <= grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_shift_reg_address0;
        else 
            shift_reg_address0 <= "XXX";
        end if; 
    end process;


    shift_reg_ce0_assign_proc : process(grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_shift_reg_ce0, grp_FIR8_Pipeline_MACC_LOOP_fu_71_shift_reg_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            shift_reg_ce0 <= grp_FIR8_Pipeline_MACC_LOOP_fu_71_shift_reg_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shift_reg_ce0 <= grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_shift_reg_ce0;
        else 
            shift_reg_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_ce1_assign_proc : process(grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_shift_reg_ce1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shift_reg_ce1 <= grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_shift_reg_ce1;
        else 
            shift_reg_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_we0_assign_proc : process(grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_shift_reg_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shift_reg_we0 <= grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_shift_reg_we0;
        else 
            shift_reg_we0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_we1_assign_proc : process(grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_shift_reg_we1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shift_reg_we1 <= grp_FIR8_Pipeline_SHIFTER_LOOP_fu_63_shift_reg_we1;
        else 
            shift_reg_we1 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln1_fu_95_p4 <= acc_fu_89_p2(15 downto 6);
    y <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln86_fu_105_p3),16));

    y_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_ap_vld <= ap_const_logic_1;
        else 
            y_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
