-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fxp_sqrt_top_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    zext_ln90 : IN STD_LOGIC_VECTOR (27 downto 0);
    s_5_out : OUT STD_LOGIC_VECTOR (30 downto 0);
    s_5_out_ap_vld : OUT STD_LOGIC;
    p_v_out : OUT STD_LOGIC_VECTOR (27 downto 0);
    p_v_out_ap_vld : OUT STD_LOGIC;
    q_1_out : OUT STD_LOGIC_VECTOR (28 downto 0);
    q_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of fxp_sqrt_top_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln104_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i1_fu_60 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal i_fu_246_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal s_22_fu_64 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal s_fu_203_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln90_cast_fu_103_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal q_star4_fu_68 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    signal q_star_fu_229_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal q6_fu_72 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    signal q_fu_237_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal empty_8_fu_220_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sub_ln106_fu_153_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln_fu_163_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln106_fu_159_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln106_1_fu_147_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln106_fu_171_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal or_ln1_fu_183_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln110_fu_191_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_139_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_2_fu_197_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal s_1_fu_177_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_fu_212_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal empty_7_fu_216_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fxp_sqrt_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component fxp_sqrt_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i1_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i1_fu_60 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    i1_fu_60 <= i_fu_246_p2;
                end if;
            end if; 
        end if;
    end process;

    q6_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    q6_fu_72 <= ap_const_lv29_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    q6_fu_72 <= q_fu_237_p3;
                end if;
            end if; 
        end if;
    end process;

    q_star4_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    q_star4_fu_68(1) <= '0';
                    q_star4_fu_68(2) <= '0';
                    q_star4_fu_68(3) <= '0';
                    q_star4_fu_68(4) <= '0';
                    q_star4_fu_68(5) <= '0';
                    q_star4_fu_68(6) <= '0';
                    q_star4_fu_68(7) <= '0';
                    q_star4_fu_68(8) <= '0';
                    q_star4_fu_68(9) <= '0';
                    q_star4_fu_68(10) <= '0';
                    q_star4_fu_68(11) <= '0';
                    q_star4_fu_68(12) <= '0';
                    q_star4_fu_68(13) <= '0';
                    q_star4_fu_68(14) <= '0';
                    q_star4_fu_68(15) <= '0';
                    q_star4_fu_68(16) <= '0';
                    q_star4_fu_68(17) <= '0';
                    q_star4_fu_68(18) <= '0';
                    q_star4_fu_68(19) <= '0';
                    q_star4_fu_68(20) <= '0';
                    q_star4_fu_68(21) <= '0';
                    q_star4_fu_68(22) <= '0';
                    q_star4_fu_68(23) <= '0';
                    q_star4_fu_68(24) <= '0';
                    q_star4_fu_68(25) <= '0';
                    q_star4_fu_68(26) <= '0';
                    q_star4_fu_68(27) <= '0';
                    q_star4_fu_68(28) <= '0';
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                                        q_star4_fu_68(28 downto 1) <= q_star_fu_229_p3(28 downto 1);
                end if;
            end if; 
        end if;
    end process;

    s_22_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    s_22_fu_64 <= zext_ln90_cast_fu_103_p1;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    s_22_fu_64 <= s_fu_203_p3;
                end if;
            end if; 
        end if;
    end process;
    q_star4_fu_68(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln104_fu_252_p2)
    begin
        if (((icmp_ln104_fu_252_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_7_fu_216_p1 <= q6_fu_72(28 - 1 downto 0);
    empty_8_fu_220_p3 <= 
        empty_fu_212_p1 when (tmp_fu_139_p3(0) = '1') else 
        empty_7_fu_216_p1;
    empty_fu_212_p1 <= q_star4_fu_68(28 - 1 downto 0);
    i_fu_246_p2 <= std_logic_vector(unsigned(i1_fu_60) + unsigned(ap_const_lv5_1));
    icmp_ln104_fu_252_p2 <= "1" when (i1_fu_60 = ap_const_lv5_1D) else "0";
    or_ln1_fu_183_p3 <= (q_star4_fu_68 & ap_const_lv2_3);
    or_ln_fu_163_p3 <= (q6_fu_72 & ap_const_lv2_1);
    p_v_out <= empty_8_fu_220_p3;

    p_v_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln104_fu_252_p2, ap_loop_exit_ready, ap_block_pp0_stage0_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln104_fu_252_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_v_out_ap_vld <= ap_const_logic_1;
        else 
            p_v_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    q_1_out <= (empty_8_fu_220_p3 & ap_const_lv1_1);

    q_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln104_fu_252_p2, ap_loop_exit_ready, ap_block_pp0_stage0_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln104_fu_252_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            q_1_out_ap_vld <= ap_const_logic_1;
        else 
            q_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    q_fu_237_p3 <= (empty_8_fu_220_p3 & ap_const_lv1_1);
    q_star_fu_229_p3 <= (empty_8_fu_220_p3 & ap_const_lv1_0);
    s_1_fu_177_p2 <= std_logic_vector(unsigned(shl_ln106_1_fu_147_p2) - unsigned(shl_ln106_fu_171_p2));
    s_2_fu_197_p2 <= std_logic_vector(unsigned(shl_ln110_fu_191_p2) + unsigned(shl_ln106_1_fu_147_p2));
    s_5_out <= 
        s_2_fu_197_p2 when (tmp_fu_139_p3(0) = '1') else 
        s_1_fu_177_p2;

    s_5_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln104_fu_252_p2, ap_loop_exit_ready, ap_block_pp0_stage0_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln104_fu_252_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_5_out_ap_vld <= ap_const_logic_1;
        else 
            s_5_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    s_fu_203_p3 <= 
        s_2_fu_197_p2 when (tmp_fu_139_p3(0) = '1') else 
        s_1_fu_177_p2;
    shl_ln106_1_fu_147_p2 <= std_logic_vector(shift_left(unsigned(s_22_fu_64),to_integer(unsigned('0' & ap_const_lv31_1(31-1 downto 0)))));
    shl_ln106_fu_171_p2 <= std_logic_vector(shift_left(unsigned(or_ln_fu_163_p3),to_integer(unsigned('0' & zext_ln106_fu_159_p1(31-1 downto 0)))));
    shl_ln110_fu_191_p2 <= std_logic_vector(shift_left(unsigned(or_ln1_fu_183_p3),to_integer(unsigned('0' & zext_ln106_fu_159_p1(31-1 downto 0)))));
    sub_ln106_fu_153_p2 <= std_logic_vector(signed(ap_const_lv5_1D) - signed(i1_fu_60));
    tmp_fu_139_p3 <= s_22_fu_64(30 downto 30);
    zext_ln106_fu_159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln106_fu_153_p2),31));
    zext_ln90_cast_fu_103_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln90),31));
end behav;
