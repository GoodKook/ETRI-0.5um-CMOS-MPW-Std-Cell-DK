// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fxp_sqrt_top_fxp_sqrt_top,hls_ip_2025_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a100t-csg324-2I,HLS_INPUT_CLOCK=1000.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.081125,HLS_SYN_LAT=33,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=212,HLS_SYN_LUT=541,HLS_VERSION=2025_1}" *)

module fxp_sqrt_top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_val,
        ap_return
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] in_val;
output  [27:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [27:0] s_1_fu_66_p3;
reg   [27:0] s_1_reg_132;
wire    grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_ap_start;
wire    grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_ap_done;
wire    grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_ap_idle;
wire    grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_ap_ready;
wire   [30:0] grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_s_5_out;
wire    grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_s_5_out_ap_vld;
wire   [27:0] grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_p_v_out;
wire    grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_p_v_out_ap_vld;
wire   [28:0] grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_q_1_out;
wire    grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_q_1_out_ap_vld;
reg    grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_ap_start_reg;
wire    ap_CS_fsm_state2;
reg   [30:0] s_5_loc_fu_48;
reg   [27:0] p_v_loc_fu_44;
reg   [28:0] q_1_loc_fu_40;
wire    ap_CS_fsm_state3;
wire   [28:0] add_ln118_fu_90_p2;
wire   [0:0] icmp_ln117_fu_84_p2;
wire   [27:0] tmp_fu_96_p4;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_ap_start_reg = 1'b0;
end

fxp_sqrt_top_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1 grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_ap_start),
    .ap_done(grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_ap_done),
    .ap_idle(grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_ap_idle),
    .ap_ready(grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_ap_ready),
    .zext_ln90(s_1_reg_132),
    .s_5_out(grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_s_5_out),
    .s_5_out_ap_vld(grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_s_5_out_ap_vld),
    .p_v_out(grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_p_v_out),
    .p_v_out_ap_vld(grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_p_v_out_ap_vld),
    .q_1_out(grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_q_1_out),
    .q_1_out_ap_vld(grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_q_1_out_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_ap_start_reg <= 1'b1;
        end else if ((grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_ap_ready == 1'b1)) begin
            grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_p_v_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_v_loc_fu_44 <= grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_p_v_out;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_q_1_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        q_1_loc_fu_40 <= grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_q_1_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        s_1_reg_132[27 : 4] <= s_1_fu_66_p3[27 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_s_5_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        s_5_loc_fu_48 <= grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_s_5_out;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln118_fu_90_p2 = (q_1_loc_fu_40 + 29'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_return = ((icmp_ln117_fu_84_p2[0:0] == 1'b1) ? tmp_fu_96_p4 : p_v_loc_fu_44);

assign grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_ap_start = grp_fxp_sqrt_top_Pipeline_VITIS_LOOP_104_1_fu_58_ap_start_reg;

assign icmp_ln117_fu_84_p2 = (($signed(s_5_loc_fu_48) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign s_1_fu_66_p3 = {{in_val}, {4'd0}};

assign tmp_fu_96_p4 = {{add_ln118_fu_90_p2[28:1]}};

always @ (posedge ap_clk) begin
    s_1_reg_132[3:0] <= 4'b0000;
end

endmodule //fxp_sqrt_top
