Qflow synthesis logfile created on Sat 05 Oct 2024 08:33:40 PM KST
Running yosys for verilog parsing and synthesis
yosys  -s array16.ys

 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2024  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.45+112 (git sha1 c8b42b7d4, clang++ 10.0.0-4ubuntu1 -fPIC -O3)

-- Executing script file `array16.ys' --

1. Executing Liberty frontend: /usr/local/share/qflow/tech/etri050/etri05_stdcells.lib
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/goodkook/ETRI050_DesignKit/devel/Ref_Design/array_multiplier/source/array16.v
Parsing Verilog input from `/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/array_multiplier/source/array16.v' to AST representation.
Generating RTLIL representation for module `\array16'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: array8.v
Parsing Verilog input from `array8.v' to AST representation.
Generating RTLIL representation for module `\array8'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: array4.v
Parsing Verilog input from `array4.v' to AST representation.
Generating RTLIL representation for module `\array4'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: array2.v
Parsing Verilog input from `array2.v' to AST representation.
Generating RTLIL representation for module `\array2'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: ha.v
Parsing Verilog input from `ha.v' to AST representation.
Generating RTLIL representation for module `\ha'.
Successfully finished Verilog frontend.

7. Executing SYNTH pass.

7.1. Executing HIERARCHY pass (managing design hierarchy).

7.1.1. Analyzing design hierarchy..
Top module:  \array16
Used module:     \array8
Used module:         \array4
Used module:             \array2
Used module:                 \ha

7.1.2. Analyzing design hierarchy..
Top module:  \array16
Used module:     \array8
Used module:         \array4
Used module:             \array2
Used module:                 \ha
Removed 0 unused modules.
Mapping positional arguments of cell array2.z2 (ha).
Mapping positional arguments of cell array2.z1 (ha).
Mapping positional arguments of cell array4.z4 (array2).
Mapping positional arguments of cell array4.z3 (array2).
Mapping positional arguments of cell array4.z2 (array2).
Mapping positional arguments of cell array4.z1 (array2).
Mapping positional arguments of cell array8.z4 (array4).
Mapping positional arguments of cell array8.z3 (array4).
Mapping positional arguments of cell array8.z2 (array4).
Mapping positional arguments of cell array8.z1 (array4).
Mapping positional arguments of cell array16.z4 (array8).
Mapping positional arguments of cell array16.z3 (array8).
Mapping positional arguments of cell array16.z2 (array8).
Mapping positional arguments of cell array16.z1 (array8).
Warning: Resizing cell port array8.z4.c from 16 bits to 8 bits.
Warning: Resizing cell port array8.z3.c from 16 bits to 8 bits.
Warning: Resizing cell port array8.z2.c from 16 bits to 8 bits.
Warning: Resizing cell port array8.z1.c from 16 bits to 8 bits.

7.2. Executing PROC pass (convert processes to netlists).

7.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

7.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

7.2.4. Executing PROC_INIT pass (extract init attributes).

7.2.5. Executing PROC_ARST pass (detect async resets in processes).

7.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

7.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

7.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

7.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

7.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

7.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module ha.
Optimizing module array2.
Optimizing module array4.
Optimizing module array8.
Optimizing module array16.

7.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module ha.
Optimizing module array2.
Optimizing module array4.
Optimizing module array8.
Optimizing module array16.

7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ha..
Finding unused cells or wires in module \array2..
Finding unused cells or wires in module \array4..
Finding unused cells or wires in module \array8..
Finding unused cells or wires in module \array16..
Removed 0 unused cells and 15 unused wires.
<suppressed ~5 debug messages>

7.5. Executing CHECK pass (checking for obvious problems).
Checking module array16...
Checking module array2...
Checking module array4...
Checking module array8...
Checking module ha...
Found and reported 0 problems.

7.6. Executing OPT pass (performing simple optimizations).

7.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module array16.
Optimizing module array2.
Optimizing module array4.
Optimizing module array8.
Optimizing module ha.

7.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\array16'.
Finding identical cells in module `\array2'.
Finding identical cells in module `\array4'.
Finding identical cells in module `\array8'.
Finding identical cells in module `\ha'.
Removed a total of 0 cells.

7.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \array16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \array2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \array4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \array8..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ha..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \array16.
  Optimizing cells in module \array2.
  Optimizing cells in module \array4.
  Optimizing cells in module \array8.
  Optimizing cells in module \ha.
Performed a total of 0 changes.

7.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\array16'.
Finding identical cells in module `\array2'.
Finding identical cells in module `\array4'.
Finding identical cells in module `\array8'.
Finding identical cells in module `\ha'.
Removed a total of 0 cells.

7.6.6. Executing OPT_DFF pass (perform DFF optimizations).

7.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \array16..
Finding unused cells or wires in module \array2..
Finding unused cells or wires in module \array4..
Finding unused cells or wires in module \array8..
Finding unused cells or wires in module \ha..

7.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module array16.
Optimizing module array2.
Optimizing module array4.
Optimizing module array8.
Optimizing module ha.

7.6.9. Finished OPT passes. (There is nothing left to do.)

7.7. Executing FSM pass (extract and optimize FSM).

7.7.1. Executing FSM_DETECT pass (finding FSMs in design).

7.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

7.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

7.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \array16..
Finding unused cells or wires in module \array2..
Finding unused cells or wires in module \array4..
Finding unused cells or wires in module \array8..
Finding unused cells or wires in module \ha..

7.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

7.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

7.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

7.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

7.8. Executing OPT pass (performing simple optimizations).

7.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module array16.
Optimizing module array2.
Optimizing module array4.
Optimizing module array8.
Optimizing module ha.

7.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\array16'.
Finding identical cells in module `\array2'.
Finding identical cells in module `\array4'.
Finding identical cells in module `\array8'.
Finding identical cells in module `\ha'.
Removed a total of 0 cells.

7.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \array16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \array2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \array4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \array8..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ha..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \array16.
  Optimizing cells in module \array2.
  Optimizing cells in module \array4.
  Optimizing cells in module \array8.
  Optimizing cells in module \ha.
Performed a total of 0 changes.

7.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\array16'.
Finding identical cells in module `\array2'.
Finding identical cells in module `\array4'.
Finding identical cells in module `\array8'.
Finding identical cells in module `\ha'.
Removed a total of 0 cells.

7.8.6. Executing OPT_DFF pass (perform DFF optimizations).

7.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \array16..
Finding unused cells or wires in module \array2..
Finding unused cells or wires in module \array4..
Finding unused cells or wires in module \array8..
Finding unused cells or wires in module \ha..

7.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module array16.
Optimizing module array2.
Optimizing module array4.
Optimizing module array8.
Optimizing module ha.

7.8.9. Finished OPT passes. (There is nothing left to do.)

7.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 8 bits (of 16) from port B of cell array16.$add$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/array_multiplier/source/array16.v:25$1 ($add).
Removed top 8 bits (of 24) from port A of cell array16.$add$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/array_multiplier/source/array16.v:28$2 ($add).
Removed top 8 bits (of 24) from port A of cell array16.$add$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/array_multiplier/source/array16.v:31$3 ($add).
Removed top 8 bits (of 16) from wire array16.temp1.
Removed top 2 bits (of 4) from port B of cell array4.$add$array4.v:25$7 ($add).
Removed top 2 bits (of 6) from port A of cell array4.$add$array4.v:28$8 ($add).
Removed top 2 bits (of 6) from port A of cell array4.$add$array4.v:30$9 ($add).
Removed top 2 bits (of 4) from wire array4.temp1.
Removed top 4 bits (of 8) from port B of cell array8.$add$array8.v:26$4 ($add).
Removed top 4 bits (of 12) from port A of cell array8.$add$array8.v:29$5 ($add).
Removed top 4 bits (of 12) from port A of cell array8.$add$array8.v:33$6 ($add).
Removed top 8 bits (of 16) from wire array8.q0.
Removed top 8 bits (of 16) from wire array8.q1.
Removed top 8 bits (of 16) from wire array8.q2.

7.10. Executing PEEPOPT pass (run peephole optimizers).

7.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \array16..
Finding unused cells or wires in module \array2..
Finding unused cells or wires in module \array4..
Finding unused cells or wires in module \array8..
Finding unused cells or wires in module \ha..
Removed 0 unused cells and 5 unused wires.
<suppressed ~3 debug messages>

7.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module array16:
  creating $macc model for $add$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/array_multiplier/source/array16.v:25$1 ($add).
  creating $macc model for $add$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/array_multiplier/source/array16.v:28$2 ($add).
  creating $macc model for $add$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/array_multiplier/source/array16.v:31$3 ($add).
  merging $macc model for $add$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/array_multiplier/source/array16.v:28$2 into $add$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/array_multiplier/source/array16.v:31$3.
  creating $alu model for $macc $add$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/array_multiplier/source/array16.v:25$1.
  creating $macc cell for $add$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/array_multiplier/source/array16.v:31$3: $auto$alumacc.cc:365:replace_macc$21
  creating $alu cell for $add$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/array_multiplier/source/array16.v:25$1: $auto$alumacc.cc:485:replace_alu$22
  created 1 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module array2:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module array4:
  creating $macc model for $add$array4.v:25$7 ($add).
  creating $macc model for $add$array4.v:28$8 ($add).
  creating $macc model for $add$array4.v:30$9 ($add).
  merging $macc model for $add$array4.v:28$8 into $add$array4.v:30$9.
  creating $alu model for $macc $add$array4.v:25$7.
  creating $macc cell for $add$array4.v:30$9: $auto$alumacc.cc:365:replace_macc$25
  creating $alu cell for $add$array4.v:25$7: $auto$alumacc.cc:485:replace_alu$26
  created 1 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module array8:
  creating $macc model for $add$array8.v:26$4 ($add).
  creating $macc model for $add$array8.v:29$5 ($add).
  creating $macc model for $add$array8.v:33$6 ($add).
  merging $macc model for $add$array8.v:29$5 into $add$array8.v:33$6.
  creating $alu model for $macc $add$array8.v:26$4.
  creating $macc cell for $add$array8.v:33$6: $auto$alumacc.cc:365:replace_macc$29
  creating $alu cell for $add$array8.v:26$4: $auto$alumacc.cc:485:replace_alu$30
  created 1 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module ha:
  created 0 $alu and 0 $macc cells.

7.13. Executing SHARE pass (SAT-based resource sharing).

7.14. Executing OPT pass (performing simple optimizations).

7.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module array16.
Optimizing module array2.
Optimizing module array4.
Optimizing module array8.
Optimizing module ha.

7.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\array16'.
Finding identical cells in module `\array2'.
Finding identical cells in module `\array4'.
Finding identical cells in module `\array8'.
Finding identical cells in module `\ha'.
Removed a total of 0 cells.

7.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \array16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \array2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \array4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \array8..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ha..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \array16.
  Optimizing cells in module \array2.
  Optimizing cells in module \array4.
  Optimizing cells in module \array8.
  Optimizing cells in module \ha.
Performed a total of 0 changes.

7.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\array16'.
Finding identical cells in module `\array2'.
Finding identical cells in module `\array4'.
Finding identical cells in module `\array8'.
Finding identical cells in module `\ha'.
Removed a total of 0 cells.

7.14.6. Executing OPT_DFF pass (perform DFF optimizations).

7.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \array16..
Finding unused cells or wires in module \array2..
Finding unused cells or wires in module \array4..
Finding unused cells or wires in module \array8..
Finding unused cells or wires in module \ha..
Removed 3 unused cells and 3 unused wires.
<suppressed ~6 debug messages>

7.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module array16.
Optimizing module array2.
Optimizing module array4.
Optimizing module array8.
Optimizing module ha.

7.14.9. Rerunning OPT passes. (Maybe there is more to do..)

7.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \array16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \array2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \array4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \array8..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ha..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \array16.
  Optimizing cells in module \array2.
  Optimizing cells in module \array4.
  Optimizing cells in module \array8.
  Optimizing cells in module \ha.
Performed a total of 0 changes.

7.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\array16'.
Finding identical cells in module `\array2'.
Finding identical cells in module `\array4'.
Finding identical cells in module `\array8'.
Finding identical cells in module `\ha'.
Removed a total of 0 cells.

7.14.13. Executing OPT_DFF pass (perform DFF optimizations).

7.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \array16..
Finding unused cells or wires in module \array2..
Finding unused cells or wires in module \array4..
Finding unused cells or wires in module \array8..
Finding unused cells or wires in module \ha..

7.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module array16.
Optimizing module array2.
Optimizing module array4.
Optimizing module array8.
Optimizing module ha.

7.14.16. Finished OPT passes. (There is nothing left to do.)

7.15. Executing MEMORY pass.

7.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

7.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

7.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

7.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

7.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

7.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \array16..
Finding unused cells or wires in module \array2..
Finding unused cells or wires in module \array4..
Finding unused cells or wires in module \array8..
Finding unused cells or wires in module \ha..

7.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

7.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

7.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \array16..
Finding unused cells or wires in module \array2..
Finding unused cells or wires in module \array4..
Finding unused cells or wires in module \array8..
Finding unused cells or wires in module \ha..

7.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

7.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \array16..
Finding unused cells or wires in module \array2..
Finding unused cells or wires in module \array4..
Finding unused cells or wires in module \array8..
Finding unused cells or wires in module \ha..

7.17. Executing OPT pass (performing simple optimizations).

7.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module array16.
Optimizing module array2.
Optimizing module array4.
Optimizing module array8.
Optimizing module ha.

7.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\array16'.
Finding identical cells in module `\array2'.
Finding identical cells in module `\array4'.
Finding identical cells in module `\array8'.
Finding identical cells in module `\ha'.
Removed a total of 0 cells.

7.17.3. Executing OPT_DFF pass (perform DFF optimizations).

7.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \array16..
Finding unused cells or wires in module \array2..
Finding unused cells or wires in module \array4..
Finding unused cells or wires in module \array8..
Finding unused cells or wires in module \ha..

7.17.5. Finished fast OPT passes.

7.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

7.19. Executing OPT pass (performing simple optimizations).

7.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module array16.
Optimizing module array2.
Optimizing module array4.
Optimizing module array8.
Optimizing module ha.

7.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\array16'.
Finding identical cells in module `\array2'.
Finding identical cells in module `\array4'.
Finding identical cells in module `\array8'.
Finding identical cells in module `\ha'.
Removed a total of 0 cells.

7.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \array16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \array2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \array4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \array8..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ha..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \array16.
  Optimizing cells in module \array2.
  Optimizing cells in module \array4.
  Optimizing cells in module \array8.
  Optimizing cells in module \ha.
Performed a total of 0 changes.

7.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\array16'.
Finding identical cells in module `\array2'.
Finding identical cells in module `\array4'.
Finding identical cells in module `\array8'.
Finding identical cells in module `\ha'.
Removed a total of 0 cells.

7.19.6. Executing OPT_SHARE pass.

7.19.7. Executing OPT_DFF pass (perform DFF optimizations).

7.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \array16..
Finding unused cells or wires in module \array2..
Finding unused cells or wires in module \array4..
Finding unused cells or wires in module \array8..
Finding unused cells or wires in module \ha..

7.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module array16.
Optimizing module array2.
Optimizing module array4.
Optimizing module array8.
Optimizing module ha.

7.19.10. Finished OPT passes. (There is nothing left to do.)

7.20. Executing TECHMAP pass (map to technology primitives).

7.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

7.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod$b9513f2555ba02118b069422fea717af39120cf7\_90_alu for cells of type $alu.
Using extmapper maccmap for cells of type $macc.
  add \q4 (8 bits, unsigned)
  add \q2 (8 bits, unsigned)
  add { \q3 [7:0] 4'0000 } (12 bits, unsigned)
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000001100 for cells of type $fa.
Using template $paramod$ee3d784672cdb1cb32d9a801a3af776716f16b74\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000001100 for cells of type $lcu.
  add \q4 (4 bits, unsigned)
  add \q2 (4 bits, unsigned)
  add { \q3 2'00 } (6 bits, unsigned)
Using template $paramod$f85408ed1aa3d09e465edae8a7bf590332ae9f7b\_90_alu for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000000110 for cells of type $fa.
Using template $paramod$00298f3f8094950cb9a5ff2fda48d0d8bde8806c\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using template $paramod$1f812f0514ea3255703342654e053e2c502325cc\_90_alu for cells of type $alu.
  add \q4 (16 bits, unsigned)
  add \q2 (16 bits, unsigned)
  add { \q3 8'00000000 } (24 bits, unsigned)
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000011000 for cells of type $fa.
Using template $paramod$e82d3fc1811c5751348a3964470632b35a435fc7\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000011000 for cells of type $lcu.
No more expansions possible.
<suppressed ~1270 debug messages>

7.21. Executing OPT pass (performing simple optimizations).

7.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module array16.
<suppressed ~192 debug messages>
Optimizing module array2.
Optimizing module array4.
<suppressed ~52 debug messages>
Optimizing module array8.
<suppressed ~98 debug messages>
Optimizing module ha.

7.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\array16'.
Finding identical cells in module `\array2'.
Finding identical cells in module `\array4'.
Finding identical cells in module `\array8'.
Finding identical cells in module `\ha'.
Removed a total of 0 cells.

7.21.3. Executing OPT_DFF pass (perform DFF optimizations).

7.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \array16..
Finding unused cells or wires in module \array2..
Finding unused cells or wires in module \array4..
Finding unused cells or wires in module \array8..
Finding unused cells or wires in module \ha..
Removed 80 unused cells and 261 unused wires.
<suppressed ~83 debug messages>

7.21.5. Finished fast OPT passes.

7.22. Executing ABC pass (technology mapping using ABC).

7.22.1. Extracting gate netlist of module `\array16' to `<abc-temp-dir>/input.blif'..
Extracted 255 gates and 311 wires to a netlist network with 56 inputs and 24 outputs.

7.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

7.22.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:               NOR cells:       19
ABC RESULTS:               NOT cells:        7
ABC RESULTS:             ORNOT cells:       15
ABC RESULTS:              NAND cells:       20
ABC RESULTS:                OR cells:       39
ABC RESULTS:            ANDNOT cells:       76
ABC RESULTS:               XOR cells:       59
ABC RESULTS:              XNOR cells:       26
ABC RESULTS:        internal signals:      231
ABC RESULTS:           input signals:       56
ABC RESULTS:          output signals:       24
Removing temp directory.

7.22.2. Extracting gate netlist of module `\array2' to `<abc-temp-dir>/input.blif'..
Extracted 4 gates and 8 wires to a netlist network with 4 inputs and 4 outputs.

7.22.2.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

7.22.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        4
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        4
Removing temp directory.

7.22.3. Extracting gate netlist of module `\array4' to `<abc-temp-dir>/input.blif'..
Extracted 45 gates and 59 wires to a netlist network with 14 inputs and 6 outputs.

7.22.3.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

7.22.3.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:               NOT cells:        2
ABC RESULTS:              NAND cells:        3
ABC RESULTS:               NOR cells:        1
ABC RESULTS:              XNOR cells:        7
ABC RESULTS:                OR cells:        5
ABC RESULTS:            ANDNOT cells:       13
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:               XOR cells:       12
ABC RESULTS:        internal signals:       39
ABC RESULTS:           input signals:       14
ABC RESULTS:          output signals:        6
Removing temp directory.

7.22.4. Extracting gate netlist of module `\array8' to `<abc-temp-dir>/input.blif'..
Extracted 113 gates and 141 wires to a netlist network with 28 inputs and 12 outputs.

7.22.4.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

7.22.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:              NAND cells:        9
ABC RESULTS:               NOT cells:        4
ABC RESULTS:             ORNOT cells:        8
ABC RESULTS:                OR cells:       11
ABC RESULTS:               NOR cells:        7
ABC RESULTS:            ANDNOT cells:       36
ABC RESULTS:               XOR cells:       28
ABC RESULTS:              XNOR cells:       13
ABC RESULTS:        internal signals:      101
ABC RESULTS:           input signals:       28
ABC RESULTS:          output signals:       12
Removing temp directory.

7.22.5. Extracting gate netlist of module `\ha' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

7.22.5.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

7.22.5.2. Re-integrating ABC results.
ABC RESULTS:               XOR cells:        1
ABC RESULTS:               AND cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        2
Removing temp directory.

7.23. Executing OPT pass (performing simple optimizations).

7.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module array16.
Optimizing module array2.
Optimizing module array4.
Optimizing module array8.
Optimizing module ha.

7.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\array16'.
Finding identical cells in module `\array2'.
Finding identical cells in module `\array4'.
Finding identical cells in module `\array8'.
Finding identical cells in module `\ha'.
Removed a total of 0 cells.

7.23.3. Executing OPT_DFF pass (perform DFF optimizations).

7.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \array16..
Finding unused cells or wires in module \array2..
Finding unused cells or wires in module \array4..
Finding unused cells or wires in module \array8..
Finding unused cells or wires in module \ha..
Removed 0 unused cells and 303 unused wires.
<suppressed ~8 debug messages>

7.23.5. Finished fast OPT passes.

7.24. Executing HIERARCHY pass (managing design hierarchy).

7.24.1. Analyzing design hierarchy..
Top module:  \array16
Used module:     \array8
Used module:         \array4
Used module:             \array2
Used module:                 \ha

7.24.2. Analyzing design hierarchy..
Top module:  \array16
Used module:     \array8
Used module:         \array4
Used module:             \array2
Used module:                 \ha
Removed 0 unused modules.

7.25. Printing statistics.

=== array16 ===

   Number of wires:                250
   Number of wire bits:            470
   Number of public wires:          12
   Number of public wire bits:     232
   Number of ports:                  3
   Number of port bits:             64
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                266
     $_ANDNOT_                      76
     $_AND_                          1
     $_NAND_                        20
     $_NOR_                         19
     $_NOT_                          7
     $_ORNOT_                       15
     $_OR_                          39
     $_XNOR_                        26
     $_XOR_                         59
     array8                          4

=== array2 ===

   Number of wires:                  4
   Number of wire bits:             12
   Number of public wires:           4
   Number of public wire bits:      12
   Number of ports:                  3
   Number of port bits:              8
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $_AND_                          4
     ha                              2

=== array4 ===

   Number of wires:                 53
   Number of wire bits:             99
   Number of public wires:          12
   Number of public wire bits:      58
   Number of ports:                  3
   Number of port bits:             16
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 51
     $_ANDNOT_                      13
     $_AND_                          2
     $_NAND_                         3
     $_NOR_                          1
     $_NOT_                          2
     $_ORNOT_                        2
     $_OR_                           5
     $_XNOR_                         7
     $_XOR_                         12
     array2                          4

=== array8 ===

   Number of wires:                117
   Number of wire bits:            233
   Number of public wires:          12
   Number of public wire bits:     128
   Number of ports:                  3
   Number of port bits:             32
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                121
     $_ANDNOT_                      36
     $_AND_                          1
     $_NAND_                         9
     $_NOR_                          7
     $_NOT_                          4
     $_ORNOT_                        8
     $_OR_                          11
     $_XNOR_                        13
     $_XOR_                         28
     array4                          4

=== ha ===

   Number of wires:                  4
   Number of wire bits:              4
   Number of public wires:           4
   Number of public wire bits:       4
   Number of ports:                  4
   Number of port bits:              4
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $_AND_                          1
     $_XOR_                          1

=== design hierarchy ===

   array16                           1
     array8                          4
       array4                        4
         array2                      4
           ha                        2

   Number of wires:               2334
   Number of wire bits:           4266
   Number of public wires:        1020
   Number of public wire bits:    2952
   Number of ports:                767
   Number of port bits:           1472
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1994
     $_ANDNOT_                     428
     $_AND_                        421
     $_NAND_                       104
     $_NOR_                         63
     $_NOT_                         55
     $_ORNOT_                       79
     $_OR_                         163
     $_XNOR_                       190
     $_XOR_                        491

7.26. Executing CHECK pass (checking for obvious problems).
Checking module array16...
Checking module array2...
Checking module array4...
Checking module array8...
Checking module ha...
Found and reported 0 problems.

8. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=864.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=864.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=1584.00) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    \DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    \DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

8.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\array16':
Mapping DFF cells in module `\array2':
Mapping DFF cells in module `\array4':
Mapping DFF cells in module `\array8':
Mapping DFF cells in module `\ha':

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module array16.
Optimizing module array2.
Optimizing module array4.
Optimizing module array8.
Optimizing module ha.

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\array16'.
Finding identical cells in module `\array2'.
Finding identical cells in module `\array4'.
Finding identical cells in module `\array8'.
Finding identical cells in module `\ha'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \array16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \array2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \array4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \array8..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ha..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \array16.
  Optimizing cells in module \array2.
  Optimizing cells in module \array4.
  Optimizing cells in module \array8.
  Optimizing cells in module \ha.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\array16'.
Finding identical cells in module `\array2'.
Finding identical cells in module `\array4'.
Finding identical cells in module `\array8'.
Finding identical cells in module `\ha'.
Removed a total of 0 cells.

9.6. Executing OPT_DFF pass (perform DFF optimizations).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \array16..
Finding unused cells or wires in module \array2..
Finding unused cells or wires in module \array4..
Finding unused cells or wires in module \array8..
Finding unused cells or wires in module \ha..

9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module array16.
Optimizing module array2.
Optimizing module array4.
Optimizing module array8.
Optimizing module ha.

9.9. Finished OPT passes. (There is nothing left to do.)

10. Executing ABC pass (technology mapping using ABC).

10.1. Extracting gate netlist of module `\array16' to `<abc-temp-dir>/input.blif'..
Extracted 262 gates and 318 wires to a netlist network with 56 inputs and 24 outputs.

10.1.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/etri050/etri05_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped cell "FAX1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "HAX1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped cell "TBUFX1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "TBUFX2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "XNOR2X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "XOR2X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "etri05_stdcells" from "/usr/local/share/qflow/tech/etri050/etri05_stdcells.lib" has 24 cells (9 skipped: 4 seq; 1 tri-state; 4 no func; 6 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

10.1.2. Re-integrating ABC results.
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:            NOR3X1 cells:        5
ABC RESULTS:             OR2X2 cells:       18
ABC RESULTS:            AND2X2 cells:       25
ABC RESULTS:           OAI21X1 cells:       63
ABC RESULTS:             INVX1 cells:       87
ABC RESULTS:           NAND3X1 cells:       60
ABC RESULTS:           NAND2X1 cells:      121
ABC RESULTS:           AOI21X1 cells:       30
ABC RESULTS:            NOR2X1 cells:       47
ABC RESULTS:        internal signals:      238
ABC RESULTS:           input signals:       56
ABC RESULTS:          output signals:       24
Removing temp directory.

10.2. Extracting gate netlist of module `\array2' to `<abc-temp-dir>/input.blif'..
Extracted 4 gates and 8 wires to a netlist network with 4 inputs and 4 outputs.

10.2.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/etri050/etri05_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped cell "FAX1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "HAX1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped cell "TBUFX1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "TBUFX2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "XNOR2X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "XOR2X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "etri05_stdcells" from "/usr/local/share/qflow/tech/etri050/etri05_stdcells.lib" has 24 cells (9 skipped: 4 seq; 1 tri-state; 4 no func; 6 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

10.2.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        4
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        4
Removing temp directory.

10.3. Extracting gate netlist of module `\array4' to `<abc-temp-dir>/input.blif'..
Extracted 47 gates and 61 wires to a netlist network with 14 inputs and 6 outputs.

10.3.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/etri050/etri05_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped cell "FAX1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "HAX1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped cell "TBUFX1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "TBUFX2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "XNOR2X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "XOR2X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "etri05_stdcells" from "/usr/local/share/qflow/tech/etri050/etri05_stdcells.lib" has 24 cells (9 skipped: 4 seq; 1 tri-state; 4 no func; 6 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

10.3.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        3
ABC RESULTS:             OR2X2 cells:        2
ABC RESULTS:           AOI22X1 cells:        2
ABC RESULTS:           NAND3X1 cells:       14
ABC RESULTS:             INVX1 cells:       21
ABC RESULTS:           OAI21X1 cells:       11
ABC RESULTS:           NAND2X1 cells:       22
ABC RESULTS:           AOI21X1 cells:        5
ABC RESULTS:            NOR2X1 cells:        8
ABC RESULTS:        internal signals:       41
ABC RESULTS:           input signals:       14
ABC RESULTS:          output signals:        6
Removing temp directory.

10.4. Extracting gate netlist of module `\array8' to `<abc-temp-dir>/input.blif'..
Extracted 117 gates and 145 wires to a netlist network with 28 inputs and 12 outputs.

10.4.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/etri050/etri05_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped cell "FAX1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "HAX1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped cell "TBUFX1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "TBUFX2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "XNOR2X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "XOR2X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "etri05_stdcells" from "/usr/local/share/qflow/tech/etri050/etri05_stdcells.lib" has 24 cells (9 skipped: 4 seq; 1 tri-state; 4 no func; 6 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

10.4.2. Re-integrating ABC results.
ABC RESULTS:           AOI21X1 cells:       10
ABC RESULTS:             OR2X2 cells:        7
ABC RESULTS:            AND2X2 cells:       10
ABC RESULTS:           OAI22X1 cells:        2
ABC RESULTS:           AOI22X1 cells:        4
ABC RESULTS:           OAI21X1 cells:       30
ABC RESULTS:             INVX1 cells:       47
ABC RESULTS:           NAND3X1 cells:       28
ABC RESULTS:           NAND2X1 cells:       58
ABC RESULTS:            NOR2X1 cells:       15
ABC RESULTS:        internal signals:      105
ABC RESULTS:           input signals:       28
ABC RESULTS:          output signals:       12
Removing temp directory.

10.5. Extracting gate netlist of module `\ha' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

10.5.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/etri050/etri05_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped cell "FAX1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "HAX1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped cell "TBUFX1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "TBUFX2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "XNOR2X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "XOR2X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "etri05_stdcells" from "/usr/local/share/qflow/tech/etri050/etri05_stdcells.lib" has 24 cells (9 skipped: 4 seq; 1 tri-state; 4 no func; 6 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

10.5.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        2
ABC RESULTS:           NAND2X1 cells:        3
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        2
Removing temp directory.

11. Executing FLATTEN pass (flatten design).
Deleting now unused module array2.
Deleting now unused module array4.
Deleting now unused module array8.
Deleting now unused module ha.
<suppressed ~14 debug messages>

12. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 0 unused cells and 3399 unused wires.

13. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port array16.a: Missing option -inpad.
Don't map input port array16.b: Missing option -inpad.
Mapping port array16.c using BUFX2.

14. Executing OPT pass (performing simple optimizations).

14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module array16.

14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\array16'.
Removed a total of 0 cells.

14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \array16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \array16.
Performed a total of 0 changes.

14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\array16'.
Removed a total of 0 cells.

14.6. Executing OPT_DFF pass (perform DFF optimizations).

14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \array16..

14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module array16.

14.9. Finished OPT passes. (There is nothing left to do.)

15. Executing Verilog backend.

15.1. Executing BMUXMAP pass.

15.2. Executing DEMUXMAP pass.
Dumping module `\array16'.

16. Printing statistics.

=== array16 ===

   Number of wires:               3573
   Number of wire bits:           4013
   Number of public wires:        3573
   Number of public wire bits:    4013
   Number of ports:                  3
   Number of port bits:             64
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3977
     $scopeinfo                    212
     AND2X2                        369
     AOI21X1                       150
     AOI22X1                        49
     BUFX2                          32
     INVX1                         867
     NAND2X1                      1089
     NAND3X1                       396
     NOR2X1                        363
     NOR3X1                          5
     OAI21X1                       359
     OAI22X1                         8
     OR2X2                          78

Warnings: 4 unique messages, 4 total
End of script. Logfile hash: 4eb052fe88, CPU: user 0.35s system 0.03s, MEM: 25.66 MB peak
Yosys 0.45+112 (git sha1 c8b42b7d4, clang++ 10.0.0-4ubuntu1 -fPIC -O3)
Time spent: 52% 2x abc (0 sec), 9% 30x opt_expr (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/local/share/qflow/tech/etri050/etri050_stdcells.lef
Running vlogFanout
vlogFanout -l 300 -c 75 -I array16_nofanout -s nullstring -p /usr/local/share/qflow/tech/etri050/etri05_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y array16_mapped.v array16_sized.v

vlogFanout for qflow 1.4.100
Parsing library "etri05_stdcells"
End of library at line 6613
Lib Read:  Processed 6615 lines.
Top internal fanout is 7 (load 338.868) from node _2517_,
driven by NAND2X1 with strength 165.779 (fF driven at latency 300)
Top fanout load-to-strength ratio is 1.1986 (latency = 359.58 ps)
Top input node fanout is 16 (load 346.784) from node a[4].
0 gates exceed specified minimum load.
0 buffers were added.
Warning 1: load of 199.295 is 1.2112 times greater than strongest gate NAND3X1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 6: load of 208.702 is 1.25892 times greater than strongest gate NAND2X1
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 3286    	Out: 3286    	+0
	"2" gates	In: 479    	Out: 479    	+0

Number of gates changed: 0
Running vlog2Verilog for antenna cell mapping.
vlog2Verilog -c -p -v VDD -g GND  -l /usr/local/share/qflow/tech/etri050/etri050_stdcells.lef 
   -o array16.v array16_sized.v
Cannot open input file: /usr/local/share/qflow/tech/etri050/etri050_stdcells.lef: No such file or directory

Generating RTL verilog and SPICE netlist file in directory
	 /home/goodkook/ETRI050_DesignKit/devel/Ref_Design/array_multiplier/synthesis
Files:
   Verilog: /home/goodkook/ETRI050_DesignKit/devel/Ref_Design/array_multiplier/synthesis/array16.rtl.v
   Verilog: /home/goodkook/ETRI050_DesignKit/devel/Ref_Design/array_multiplier/synthesis/array16.rtlnopwr.v
   Verilog: /home/goodkook/ETRI050_DesignKit/devel/Ref_Design/array_multiplier/synthesis/array16.rtlbb.v
   Spice:   /home/goodkook/ETRI050_DesignKit/devel/Ref_Design/array_multiplier/synthesis/array16.spc

Running vlog2Verilog.
vlog2Verilog -c -v VDD -g GND  -l /usr/local/share/qflow/tech/etri050/etri050_stdcells.lef 
	-o array16.rtl.v
   array16.v
Cannot open input file: /usr/local/share/qflow/tech/etri050/etri050_stdcells.lef: No such file or directory
vlog2Verilog -c -p -v VDD -g GND  -l /usr/local/share/qflow/tech/etri050/etri050_stdcells.lef 
	-o array16.rtlnopwr.v
   array16.v
Cannot open input file: /usr/local/share/qflow/tech/etri050/etri050_stdcells.lef: No such file or directory
/usr/local/share/qflow/bin/vlog2Verilog -c -p -b -n -v VDD -g GND  -l /usr/local/share/qflow/tech/etri050/etri050_stdcells.lef
   -o array16.rtlbb.v
Cannot open input file: /usr/local/share/qflow/tech/etri050/etri050_stdcells.lef: No such file or directory
Running vlog2Spice.
vlog2Spice -i -l  /usr/local/share/qflow/tech/etri050/etri050_stdcells.sp -o array16.spc array16.rtl.v
Couldn't open /usr/local/share/qflow/tech/etri050/etri050_stdcells.sp for reading
Warning:  No SPICE subcircuit for NOR2X1.  Pin order will be arbitrary.
Warning:  No SPICE subcircuit for NAND2X1.  Pin order will be arbitrary.
Warning:  No SPICE subcircuit for INVX1.  Pin order will be arbitrary.
Warning:  No SPICE subcircuit for OR2X2.  Pin order will be arbitrary.
Warning:  No SPICE subcircuit for AND2X2.  Pin order will be arbitrary.
Warning:  No SPICE subcircuit for AOI21X1.  Pin order will be arbitrary.
Warning:  No SPICE subcircuit for NAND3X1.  Pin order will be arbitrary.
Warning:  No SPICE subcircuit for OAI21X1.  Pin order will be arbitrary.
Warning:  No SPICE subcircuit for NOR3X1.  Pin order will be arbitrary.
Warning:  No SPICE subcircuit for AOI22X1.  Pin order will be arbitrary.
Warning:  No SPICE subcircuit for OAI22X1.  Pin order will be arbitrary.
Warning:  No SPICE subcircuit for BUFX2.  Pin order will be arbitrary.
Running spi2xspice.py
spi2xspice.py "/usr/local/share/qflow/tech/etri050/etri05_stdcells.lib" array16.spc array16.xspice

Synthesis script ended on Sat 05 Oct 2024 08:33:41 PM KST
