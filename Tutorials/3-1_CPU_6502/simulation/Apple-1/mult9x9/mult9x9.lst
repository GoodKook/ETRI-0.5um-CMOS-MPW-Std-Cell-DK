ca65 V2.13.3 - (C) Copyright 1998-2012 Ullrich von Bassewitz
Main file   : mult9x9.s
Current file: mult9x9.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.13.3
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.13.3"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
000000r 1               	.macpack	longbranch
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_printf
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"RODATA"
000000r 1               
000000r 1               L0001:
000000r 1  25 6C 64 20  	.byte	$25,$6C,$64,$20,$78,$20,$25,$6C,$64,$20,$3D,$20,$25,$6C,$64,$0A
000004r 1  78 20 25 6C  
000008r 1  64 20 3D 20  
00000Cr 1  25 6C 64 0A  
000010r 1  00 2D 2D 25  	.byte	$00,$2D,$2D,$25,$6C,$64,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$0A,$00
000014r 1  6C 64 2D 2D  
000018r 1  2D 2D 2D 2D  
00001Cr 1  2D 2D 0A 00  
000020r 1               
000020r 1               ; ---------------------------------------------------------------
000020r 1               ; int __near__ main (void)
000020r 1               ; ---------------------------------------------------------------
000020r 1               
000020r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_main: near
000000r 1               
000000r 1               .segment	"BSS"
000000r 1               
000000r 1               L0003:
000000r 1  00 00 00 00  	.res	4,$00
000004r 1               L0004:
000004r 1  00 00 00 00  	.res	4,$00
000008r 1               L0005:
000008r 1  00 00        	.res	2,$00
00000Ar 1               
00000Ar 1               .segment	"CODE"
000000r 1               
000000r 1               ;
000000r 1               ; int i = 0;
000000r 1               ;
000000r 1  A9 00        	lda     #$00
000002r 1  8D rr rr     	sta     L0005
000005r 1  8D rr rr     	sta     L0005+1
000008r 1               ;
000008r 1               ; for (x=2000; x<=9000; x+=1000)
000008r 1               ;
000008r 1  A2 07        	ldx     #$07
00000Ar 1  A9 D0        	lda     #$D0
00000Cr 1  8D rr rr     	sta     L0003
00000Fr 1  8E rr rr     	stx     L0003+1
000012r 1  A0 00        	ldy     #$00
000014r 1  8C rr rr     	sty     L0003+2
000017r 1  8C rr rr     L0024:	sty     L0003+3
00001Ar 1  AD rr rr     	lda     L0003+3
00001Dr 1  85 rr        	sta     sreg+1
00001Fr 1  AD rr rr     	lda     L0003+2
000022r 1  85 rr        	sta     sreg
000024r 1  AE rr rr     	ldx     L0003+1
000027r 1  AD rr rr     	lda     L0003
00002Ar 1  20 rr rr     	jsr     pusheax
00002Dr 1  A2 23        	ldx     #$23
00002Fr 1  A9 00        	lda     #$00
000031r 1  85 rr        	sta     sreg
000033r 1  85 rr        	sta     sreg+1
000035r 1  A9 29        	lda     #$29
000037r 1  20 rr rr     	jsr     toslteax
00003Ar 1  D0 03 4C rr  	jeq     L0008
00003Er 1  rr           
00003Fr 1               ;
00003Fr 1               ; for (y = 1000; y<=9000; y+=1000)
00003Fr 1               ;
00003Fr 1  A2 03        	ldx     #$03
000041r 1  A9 E8        	lda     #$E8
000043r 1  8D rr rr     	sta     L0004
000046r 1  8E rr rr     	stx     L0004+1
000049r 1  A0 00        	ldy     #$00
00004Br 1  8C rr rr     	sty     L0004+2
00004Er 1  8C rr rr     L0023:	sty     L0004+3
000051r 1  AD rr rr     	lda     L0004+3
000054r 1  85 rr        	sta     sreg+1
000056r 1  AD rr rr     	lda     L0004+2
000059r 1  85 rr        	sta     sreg
00005Br 1  AE rr rr     	ldx     L0004+1
00005Er 1  AD rr rr     	lda     L0004
000061r 1  20 rr rr     	jsr     pusheax
000064r 1  A2 23        	ldx     #$23
000066r 1  A9 00        	lda     #$00
000068r 1  85 rr        	sta     sreg
00006Ar 1  85 rr        	sta     sreg+1
00006Cr 1  A9 29        	lda     #$29
00006Er 1  20 rr rr     	jsr     toslteax
000071r 1  D0 03 4C rr  	jeq     L0011
000075r 1  rr           
000076r 1               ;
000076r 1               ; printf("%ld x %ld = %ld\n", x, y, (x*y));
000076r 1               ;
000076r 1  A9 rr        	lda     #<(L0001)
000078r 1  A2 rr        	ldx     #>(L0001)
00007Ar 1  20 rr rr     	jsr     pushax
00007Dr 1  AD rr rr     	lda     L0003+3
000080r 1  85 rr        	sta     sreg+1
000082r 1  AD rr rr     	lda     L0003+2
000085r 1  85 rr        	sta     sreg
000087r 1  AE rr rr     	ldx     L0003+1
00008Ar 1  AD rr rr     	lda     L0003
00008Dr 1  20 rr rr     	jsr     pusheax
000090r 1  AD rr rr     	lda     L0004+3
000093r 1  85 rr        	sta     sreg+1
000095r 1  AD rr rr     	lda     L0004+2
000098r 1  85 rr        	sta     sreg
00009Ar 1  AE rr rr     	ldx     L0004+1
00009Dr 1  AD rr rr     	lda     L0004
0000A0r 1  20 rr rr     	jsr     pusheax
0000A3r 1  AD rr rr     	lda     L0003+3
0000A6r 1  85 rr        	sta     sreg+1
0000A8r 1  AD rr rr     	lda     L0003+2
0000ABr 1  85 rr        	sta     sreg
0000ADr 1  AE rr rr     	ldx     L0003+1
0000B0r 1  AD rr rr     	lda     L0003
0000B3r 1  20 rr rr     	jsr     pusheax
0000B6r 1  AD rr rr     	lda     L0004+3
0000B9r 1  85 rr        	sta     sreg+1
0000BBr 1  AD rr rr     	lda     L0004+2
0000BEr 1  85 rr        	sta     sreg
0000C0r 1  AE rr rr     	ldx     L0004+1
0000C3r 1  AD rr rr     	lda     L0004
0000C6r 1  20 rr rr     	jsr     tosmuleax
0000C9r 1  20 rr rr     	jsr     pusheax
0000CCr 1  A0 0E        	ldy     #$0E
0000CEr 1  20 rr rr     	jsr     _printf
0000D1r 1               ;
0000D1r 1               ; for (y = 1000; y<=9000; y+=1000)
0000D1r 1               ;
0000D1r 1  AD rr rr     	lda     L0004+3
0000D4r 1  85 rr        	sta     sreg+1
0000D6r 1  AD rr rr     	lda     L0004+2
0000D9r 1  85 rr        	sta     sreg
0000DBr 1  AE rr rr     	ldx     L0004+1
0000DEr 1  AD rr rr     	lda     L0004
0000E1r 1  20 rr rr     	jsr     pusheax
0000E4r 1  A2 03        	ldx     #$03
0000E6r 1  A9 E8        	lda     #$E8
0000E8r 1  20 rr rr     	jsr     tosadd0ax
0000EBr 1  8D rr rr     	sta     L0004
0000EEr 1  8E rr rr     	stx     L0004+1
0000F1r 1  A4 rr        	ldy     sreg
0000F3r 1  8C rr rr     	sty     L0004+2
0000F6r 1  A4 rr        	ldy     sreg+1
0000F8r 1  4C rr rr     	jmp     L0023
0000FBr 1               ;
0000FBr 1               ; printf("--%ld--------\n", x);
0000FBr 1               ;
0000FBr 1  A9 rr        L0011:	lda     #<(L0001+17)
0000FDr 1  A2 rr        	ldx     #>(L0001+17)
0000FFr 1  20 rr rr     	jsr     pushax
000102r 1  AD rr rr     	lda     L0003+3
000105r 1  85 rr        	sta     sreg+1
000107r 1  AD rr rr     	lda     L0003+2
00010Ar 1  85 rr        	sta     sreg
00010Cr 1  AE rr rr     	ldx     L0003+1
00010Fr 1  AD rr rr     	lda     L0003
000112r 1  20 rr rr     	jsr     pusheax
000115r 1  A0 06        	ldy     #$06
000117r 1  20 rr rr     	jsr     _printf
00011Ar 1               ;
00011Ar 1               ; for (x=2000; x<=9000; x+=1000)
00011Ar 1               ;
00011Ar 1  AD rr rr     	lda     L0003+3
00011Dr 1  85 rr        	sta     sreg+1
00011Fr 1  AD rr rr     	lda     L0003+2
000122r 1  85 rr        	sta     sreg
000124r 1  AE rr rr     	ldx     L0003+1
000127r 1  AD rr rr     	lda     L0003
00012Ar 1  20 rr rr     	jsr     pusheax
00012Dr 1  A2 03        	ldx     #$03
00012Fr 1  A9 E8        	lda     #$E8
000131r 1  20 rr rr     	jsr     tosadd0ax
000134r 1  8D rr rr     	sta     L0003
000137r 1  8E rr rr     	stx     L0003+1
00013Ar 1  A4 rr        	ldy     sreg
00013Cr 1  8C rr rr     	sty     L0003+2
00013Fr 1  A4 rr        	ldy     sreg+1
000141r 1  4C rr rr     	jmp     L0024
000144r 1               ;
000144r 1               ; return 0;
000144r 1               ;
000144r 1  A2 00        L0008:	ldx     #$00
000146r 1  8A           	txa
000147r 1               ;
000147r 1               ; }
000147r 1               ;
000147r 1  60           	rts
000148r 1               
000148r 1               .endproc
000148r 1               
000148r 1               
