ca65 V2.13.3 - (C) Copyright 1998-2012 Ullrich von Bassewitz
Main file   : hello_world.s
Current file: hello_world.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.13.3
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.13.3"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
000000r 1               	.macpack	longbranch
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_printf
000000r 1               	.import		_putchar
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"RODATA"
000000r 1               
000000r 1               L0001:
000000r 1  25 73 00     	.byte	$25,$73,$00
000003r 1               
000003r 1               ; ---------------------------------------------------------------
000003r 1               ; int __near__ main (void)
000003r 1               ; ---------------------------------------------------------------
000003r 1               
000003r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_main: near
000000r 1               
000000r 1               .segment	"RODATA"
000003r 1               
000003r 1               L0006:
000003r 1  48 65 6C 6C  	.byte	$48,$65,$6C,$6C,$6F,$20,$57,$6F,$72,$6C,$64,$0A,$00
000007r 1  6F 20 57 6F  
00000Br 1  72 6C 64 0A  
00000Fr 1  00           
000010r 1               
000010r 1               .segment	"BSS"
000000r 1               
000000r 1               L0003:
000000r 1  00 00        	.res	2,$00
000002r 1               L0005:
000002r 1  00 00 00 00  	.res	13,$00
000006r 1  00 00 00 00  
00000Ar 1  00 00 00 00  
00000Er 1  00           
00000Fr 1               
00000Fr 1               .segment	"CODE"
000000r 1               
000000r 1               ;
000000r 1               ; int i = 0;
000000r 1               ;
000000r 1  A9 00        	lda     #$00
000002r 1  8D rr rr     	sta     L0003
000005r 1  8D rr rr     	sta     L0003+1
000008r 1               ;
000008r 1               ; char szBuff[] = "Hello World\n";
000008r 1               ;
000008r 1  A0 0C        	ldy     #$0C
00000Ar 1  B9 rr rr     L0007:	lda     L0006,y
00000Dr 1  99 rr rr     	sta     L0005,y
000010r 1  88           	dey
000011r 1  10 F7        	bpl     L0007
000013r 1               ;
000013r 1               ; printf("%s", szBuff);
000013r 1               ;
000013r 1  A9 rr        	lda     #<(L0001)
000015r 1  A2 rr        	ldx     #>(L0001)
000017r 1  20 rr rr     	jsr     pushax
00001Ar 1  A9 rr        	lda     #<(L0005)
00001Cr 1  A2 rr        	ldx     #>(L0005)
00001Er 1  20 rr rr     	jsr     pushax
000021r 1  A0 04        	ldy     #$04
000023r 1  20 rr rr     	jsr     _printf
000026r 1               ;
000026r 1               ; if (szBuff[i])
000026r 1               ;
000026r 1  A9 rr        L000B:	lda     #<(L0005)
000028r 1  85 rr        	sta     ptr1
00002Ar 1  A9 rr        	lda     #>(L0005)
00002Cr 1  18           	clc
00002Dr 1  6D rr rr     	adc     L0003+1
000030r 1  85 rr        	sta     ptr1+1
000032r 1  AC rr rr     	ldy     L0003
000035r 1  B1 rr        	lda     (ptr1),y
000037r 1  F0 28        	beq     L000C
000039r 1               ;
000039r 1               ; putchar(szBuff[i]);
000039r 1               ;
000039r 1  A9 rr        	lda     #<(L0005)
00003Br 1  85 rr        	sta     ptr1
00003Dr 1  A9 rr        	lda     #>(L0005)
00003Fr 1  18           	clc
000040r 1  6D rr rr     	adc     L0003+1
000043r 1  85 rr        	sta     ptr1+1
000045r 1  AC rr rr     	ldy     L0003
000048r 1  B1 rr        	lda     (ptr1),y
00004Ar 1  A2 00        	ldx     #$00
00004Cr 1  20 rr rr     	jsr     _putchar
00004Fr 1               ;
00004Fr 1               ; i++;
00004Fr 1               ;
00004Fr 1  AD rr rr     	lda     L0003
000052r 1  AE rr rr     	ldx     L0003+1
000055r 1  20 rr rr     	jsr     incax1
000058r 1  8D rr rr     	sta     L0003
00005Br 1  8E rr rr     	stx     L0003+1
00005Er 1               ;
00005Er 1               ; }
00005Er 1               ;
00005Er 1  4C rr rr     	jmp     L000B
000061r 1               ;
000061r 1               ; return 0;
000061r 1               ;
000061r 1  AA           L000C:	tax
000062r 1               ;
000062r 1               ; }
000062r 1               ;
000062r 1  60           	rts
000063r 1               
000063r 1               .endproc
000063r 1               
000063r 1               
