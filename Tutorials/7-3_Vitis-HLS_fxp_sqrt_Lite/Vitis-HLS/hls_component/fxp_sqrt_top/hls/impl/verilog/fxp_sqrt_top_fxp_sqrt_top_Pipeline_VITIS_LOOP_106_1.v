// ==============================================================
// Generated by Vitis HLS v2024.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module fxp_sqrt_top_fxp_sqrt_top_Pipeline_VITIS_LOOP_106_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln90,
        s_4_out,
        s_4_out_ap_vld,
        p_v_out,
        p_v_out_ap_vld,
        q_1_out,
        q_1_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [10:0] zext_ln90;
output  [12:0] s_4_out;
output   s_4_out_ap_vld;
output  [9:0] p_v_out;
output   p_v_out_ap_vld;
output  [10:0] q_1_out;
output   q_1_out_ap_vld;

reg ap_idle;
reg s_4_out_ap_vld;
reg p_v_out_ap_vld;
reg q_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln106_fu_142_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] sub_ln108_fu_130_p2;
reg   [3:0] sub_ln108_reg_305;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln106_reg_310;
reg   [3:0] i1_fu_60;
wire   [3:0] i_fu_136_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i1_load;
wire    ap_block_pp0_stage0;
reg   [12:0] s_12_fu_64;
wire   [12:0] s_fu_219_p3;
wire   [12:0] zext_ln90_cast_fu_103_p1;
reg   [10:0] q_star4_fu_68;
wire   [10:0] q_star_fu_245_p3;
reg   [10:0] q6_fu_72;
wire   [10:0] q_fu_253_p3;
reg    ap_loop_exit_ready_pp0_iter1_reg;
wire    ap_block_pp0_stage0_01001;
wire   [9:0] empty_10_fu_236_p3;
wire   [12:0] or_ln_fu_179_p3;
wire   [12:0] zext_ln108_fu_176_p1;
wire   [12:0] shl_ln108_1_fu_170_p2;
wire   [12:0] shl_ln108_fu_187_p2;
wire   [12:0] or_ln1_fu_199_p3;
wire   [12:0] shl_ln112_fu_207_p2;
wire   [0:0] tmp_fu_162_p3;
wire   [12:0] s_2_fu_213_p2;
wire   [12:0] s_1_fu_193_p2;
wire   [9:0] empty_fu_228_p1;
wire   [9:0] empty_9_fu_232_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 i1_fu_60 = 4'd0;
#0 s_12_fu_64 = 13'd0;
#0 q_star4_fu_68 = 11'd0;
#0 q6_fu_72 = 11'd0;
#0 ap_done_reg = 1'b0;
end

fxp_sqrt_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
            i1_fu_60 <= i_fu_136_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i1_fu_60 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            q6_fu_72 <= 11'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            q6_fu_72 <= q_fu_253_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
                        q_star4_fu_68[1] <= 1'b0;
            q_star4_fu_68[2] <= 1'b0;
            q_star4_fu_68[3] <= 1'b0;
            q_star4_fu_68[4] <= 1'b0;
            q_star4_fu_68[5] <= 1'b0;
            q_star4_fu_68[6] <= 1'b0;
            q_star4_fu_68[7] <= 1'b0;
            q_star4_fu_68[8] <= 1'b0;
            q_star4_fu_68[9] <= 1'b0;
            q_star4_fu_68[10] <= 1'b0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
                        q_star4_fu_68[10 : 1] <= q_star_fu_245_p3[10 : 1];
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            s_12_fu_64 <= zext_ln90_cast_fu_103_p1;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            s_12_fu_64 <= s_fu_219_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln106_reg_310 <= icmp_ln106_fu_142_p2;
        sub_ln108_reg_305 <= sub_ln108_fu_130_p2;
    end
end

always @ (*) begin
    if (((icmp_ln106_fu_142_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i1_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i1_load = i1_fu_60;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (icmp_ln106_reg_310 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_v_out_ap_vld = 1'b1;
    end else begin
        p_v_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (icmp_ln106_reg_310 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        q_1_out_ap_vld = 1'b1;
    end else begin
        q_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (icmp_ln106_reg_310 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_4_out_ap_vld = 1'b1;
    end else begin
        s_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign empty_10_fu_236_p3 = ((tmp_fu_162_p3[0:0] == 1'b1) ? empty_fu_228_p1 : empty_9_fu_232_p1);

assign empty_9_fu_232_p1 = q6_fu_72[9:0];

assign empty_fu_228_p1 = q_star4_fu_68[9:0];

assign i_fu_136_p2 = (ap_sig_allocacmp_i1_load + 4'd1);

assign icmp_ln106_fu_142_p2 = ((ap_sig_allocacmp_i1_load == 4'd11) ? 1'b1 : 1'b0);

assign or_ln1_fu_199_p3 = {{q_star4_fu_68}, {2'd3}};

assign or_ln_fu_179_p3 = {{q6_fu_72}, {2'd1}};

assign p_v_out = empty_10_fu_236_p3;

assign q_1_out = {{empty_10_fu_236_p3}, {1'd1}};

assign q_fu_253_p3 = {{empty_10_fu_236_p3}, {1'd1}};

assign q_star_fu_245_p3 = {{empty_10_fu_236_p3}, {1'd0}};

assign s_1_fu_193_p2 = (shl_ln108_1_fu_170_p2 - shl_ln108_fu_187_p2);

assign s_2_fu_213_p2 = (shl_ln112_fu_207_p2 + shl_ln108_1_fu_170_p2);

assign s_4_out = ((tmp_fu_162_p3[0:0] == 1'b1) ? s_2_fu_213_p2 : s_1_fu_193_p2);

assign s_fu_219_p3 = ((tmp_fu_162_p3[0:0] == 1'b1) ? s_2_fu_213_p2 : s_1_fu_193_p2);

assign shl_ln108_1_fu_170_p2 = s_12_fu_64 << 13'd1;

assign shl_ln108_fu_187_p2 = or_ln_fu_179_p3 << zext_ln108_fu_176_p1;

assign shl_ln112_fu_207_p2 = or_ln1_fu_199_p3 << zext_ln108_fu_176_p1;

assign sub_ln108_fu_130_p2 = ($signed(4'd11) - $signed(ap_sig_allocacmp_i1_load));

assign tmp_fu_162_p3 = s_12_fu_64[32'd12];

assign zext_ln108_fu_176_p1 = sub_ln108_reg_305;

assign zext_ln90_cast_fu_103_p1 = zext_ln90;

always @ (posedge ap_clk) begin
    q_star4_fu_68[0] <= 1'b0;
end

endmodule //fxp_sqrt_top_fxp_sqrt_top_Pipeline_VITIS_LOOP_106_1
