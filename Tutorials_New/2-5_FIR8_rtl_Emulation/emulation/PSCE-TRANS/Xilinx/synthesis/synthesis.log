
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.52+63 (git sha1 7f7ad87b7, clang++ 18.1.3 -fPIC -O3)

-- Executing script file `fir8_wrapper.ys' --

1. Executing Verilog-2005 frontend: ../../../fir8_wrapper.v
Parsing Verilog input from `../../../fir8_wrapper.v' to AST representation.
Generating RTLIL representation for module `\fir8_wrapper'.
Warning: Replacing memory \vectOut with list of registers. See ../../../fir8_wrapper.v:38
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: ../../../../../2-5_Lab3_FIR8/rtl_verilog/fir_pe.v
Parsing Verilog input from `../../../../../2-5_Lab3_FIR8/rtl_verilog/fir_pe.v' to AST representation.
Generating RTLIL representation for module `\fir_pe'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: ../../../../source/fir8.v
Parsing SystemVerilog input from `../../../../source/fir8.v' to AST representation.
Generating RTLIL representation for module `\fir8'.
Successfully finished Verilog frontend.

4. Executing HIERARCHY pass (managing design hierarchy).

4.1. Analyzing design hierarchy..
Top module:  \fir8_wrapper
Used module:     \fir8
Used module:         \fir_pe

4.2. Analyzing design hierarchy..
Top module:  \fir8_wrapper
Used module:     \fir8
Used module:         \fir_pe
Removed 0 unused modules.

5. Executing SYNTH_XILINX pass.

5.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/xilinx/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/xilinx/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\VCC'.
Generating RTLIL representation for module `\GND'.
Generating RTLIL representation for module `\IBUF'.
Generating RTLIL representation for module `\IBUFG'.
Generating RTLIL representation for module `\OBUF'.
Generating RTLIL representation for module `\IOBUF'.
Generating RTLIL representation for module `\OBUFT'.
Generating RTLIL representation for module `\BUFG'.
Generating RTLIL representation for module `\BUFGCTRL'.
Generating RTLIL representation for module `\BUFHCE'.
Generating RTLIL representation for module `\INV'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\LUT5'.
Generating RTLIL representation for module `\LUT6'.
Generating RTLIL representation for module `\LUT6_2'.
Generating RTLIL representation for module `\$__ABC9_LUT7'.
Generating RTLIL representation for module `\$__ABC9_LUT8'.
Generating RTLIL representation for module `\MUXCY'.
Generating RTLIL representation for module `\MUXF5'.
Generating RTLIL representation for module `\MUXF6'.
Generating RTLIL representation for module `\MUXF7'.
Generating RTLIL representation for module `\MUXF8'.
Generating RTLIL representation for module `\MUXF9'.
Generating RTLIL representation for module `\XORCY'.
Generating RTLIL representation for module `\CARRY4'.
Generating RTLIL representation for module `\CARRY8'.
Generating RTLIL representation for module `\ORCY'.
Generating RTLIL representation for module `\MULT_AND'.
Generating RTLIL representation for module `\FDRE'.
Generating RTLIL representation for module `\FDRE_1'.
Generating RTLIL representation for module `\FDSE'.
Generating RTLIL representation for module `\FDSE_1'.
Generating RTLIL representation for module `\FDRSE'.
Generating RTLIL representation for module `\FDRSE_1'.
Generating RTLIL representation for module `\FDCE'.
Generating RTLIL representation for module `\FDCE_1'.
Generating RTLIL representation for module `\FDPE'.
Generating RTLIL representation for module `\FDPE_1'.
Generating RTLIL representation for module `\FDCPE'.
Generating RTLIL representation for module `\FDCPE_1'.
Generating RTLIL representation for module `\LDCE'.
Generating RTLIL representation for module `\LDPE'.
Generating RTLIL representation for module `\LDCPE'.
Generating RTLIL representation for module `\AND2B1L'.
Generating RTLIL representation for module `\OR2L'.
Generating RTLIL representation for module `\RAM16X1S'.
Generating RTLIL representation for module `\RAM16X1S_1'.
Generating RTLIL representation for module `\RAM32X1S'.
Generating RTLIL representation for module `\RAM32X1S_1'.
Generating RTLIL representation for module `\RAM64X1S'.
Generating RTLIL representation for module `\RAM64X1S_1'.
Generating RTLIL representation for module `\RAM128X1S'.
Generating RTLIL representation for module `\RAM128X1S_1'.
Generating RTLIL representation for module `\RAM256X1S'.
Generating RTLIL representation for module `\RAM512X1S'.
Generating RTLIL representation for module `\RAM16X2S'.
Generating RTLIL representation for module `\RAM32X2S'.
Generating RTLIL representation for module `\RAM64X2S'.
Generating RTLIL representation for module `\RAM16X4S'.
Generating RTLIL representation for module `\RAM32X4S'.
Generating RTLIL representation for module `\RAM16X8S'.
Generating RTLIL representation for module `\RAM32X8S'.
Generating RTLIL representation for module `\RAM16X1D'.
Generating RTLIL representation for module `\RAM16X1D_1'.
Generating RTLIL representation for module `\RAM32X1D'.
Generating RTLIL representation for module `\RAM32X1D_1'.
Generating RTLIL representation for module `\RAM64X1D'.
Generating RTLIL representation for module `\RAM64X1D_1'.
Generating RTLIL representation for module `\RAM128X1D'.
Generating RTLIL representation for module `\RAM256X1D'.
Generating RTLIL representation for module `\RAM32M'.
Generating RTLIL representation for module `\RAM32M16'.
Generating RTLIL representation for module `\RAM64M'.
Generating RTLIL representation for module `\RAM64M8'.
Generating RTLIL representation for module `\RAM32X16DR8'.
Generating RTLIL representation for module `\RAM64X8SW'.
Generating RTLIL representation for module `\ROM16X1'.
Generating RTLIL representation for module `\ROM32X1'.
Generating RTLIL representation for module `\ROM64X1'.
Generating RTLIL representation for module `\ROM128X1'.
Generating RTLIL representation for module `\ROM256X1'.
Generating RTLIL representation for module `\SRL16'.
Generating RTLIL representation for module `\SRL16E'.
Generating RTLIL representation for module `\SRLC16'.
Generating RTLIL representation for module `\SRLC16E'.
Generating RTLIL representation for module `\SRLC32E'.
Generating RTLIL representation for module `\CFGLUT5'.
Generating RTLIL representation for module `\MULT18X18'.
Generating RTLIL representation for module `\MULT18X18S'.
Generating RTLIL representation for module `\MULT18X18SIO'.
Generating RTLIL representation for module `\DSP48A'.
Generating RTLIL representation for module `\DSP48A1'.
Generating RTLIL representation for module `\DSP48'.
Generating RTLIL representation for module `\DSP48E1'.
Generating RTLIL representation for module `\RAMB18E1'.
Generating RTLIL representation for module `\RAMB36E1'.
Successfully finished Verilog frontend.

5.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/xilinx/cells_xtra.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/xilinx/cells_xtra.v' to AST representation.
Generating RTLIL representation for module `\RAMB4_S1'.
Generating RTLIL representation for module `\RAMB4_S2'.
Generating RTLIL representation for module `\RAMB4_S4'.
Generating RTLIL representation for module `\RAMB4_S8'.
Generating RTLIL representation for module `\RAMB4_S16'.
Generating RTLIL representation for module `\RAMB4_S1_S1'.
Generating RTLIL representation for module `\RAMB4_S1_S2'.
Generating RTLIL representation for module `\RAMB4_S1_S4'.
Generating RTLIL representation for module `\RAMB4_S1_S8'.
Generating RTLIL representation for module `\RAMB4_S1_S16'.
Generating RTLIL representation for module `\RAMB4_S2_S2'.
Generating RTLIL representation for module `\RAMB4_S2_S4'.
Generating RTLIL representation for module `\RAMB4_S2_S8'.
Generating RTLIL representation for module `\RAMB4_S2_S16'.
Generating RTLIL representation for module `\RAMB4_S4_S4'.
Generating RTLIL representation for module `\RAMB4_S4_S8'.
Generating RTLIL representation for module `\RAMB4_S4_S16'.
Generating RTLIL representation for module `\RAMB4_S8_S8'.
Generating RTLIL representation for module `\RAMB4_S8_S16'.
Generating RTLIL representation for module `\RAMB4_S16_S16'.
Generating RTLIL representation for module `\RAMB16_S1'.
Generating RTLIL representation for module `\RAMB16_S2'.
Generating RTLIL representation for module `\RAMB16_S4'.
Generating RTLIL representation for module `\RAMB16_S9'.
Generating RTLIL representation for module `\RAMB16_S18'.
Generating RTLIL representation for module `\RAMB16_S36'.
Generating RTLIL representation for module `\RAMB16_S1_S1'.
Generating RTLIL representation for module `\RAMB16_S1_S2'.
Generating RTLIL representation for module `\RAMB16_S1_S4'.
Generating RTLIL representation for module `\RAMB16_S1_S9'.
Generating RTLIL representation for module `\RAMB16_S1_S18'.
Generating RTLIL representation for module `\RAMB16_S1_S36'.
Generating RTLIL representation for module `\RAMB16_S2_S2'.
Generating RTLIL representation for module `\RAMB16_S2_S4'.
Generating RTLIL representation for module `\RAMB16_S2_S9'.
Generating RTLIL representation for module `\RAMB16_S2_S18'.
Generating RTLIL representation for module `\RAMB16_S2_S36'.
Generating RTLIL representation for module `\RAMB16_S4_S4'.
Generating RTLIL representation for module `\RAMB16_S4_S9'.
Generating RTLIL representation for module `\RAMB16_S4_S18'.
Generating RTLIL representation for module `\RAMB16_S4_S36'.
Generating RTLIL representation for module `\RAMB16_S9_S9'.
Generating RTLIL representation for module `\RAMB16_S9_S18'.
Generating RTLIL representation for module `\RAMB16_S9_S36'.
Generating RTLIL representation for module `\RAMB16_S18_S18'.
Generating RTLIL representation for module `\RAMB16_S18_S36'.
Generating RTLIL representation for module `\RAMB16_S36_S36'.
Generating RTLIL representation for module `\RAMB16BWE_S18'.
Generating RTLIL representation for module `\RAMB16BWE_S36'.
Generating RTLIL representation for module `\RAMB16BWE_S18_S9'.
Generating RTLIL representation for module `\RAMB16BWE_S18_S18'.
Generating RTLIL representation for module `\RAMB16BWE_S36_S9'.
Generating RTLIL representation for module `\RAMB16BWE_S36_S18'.
Generating RTLIL representation for module `\RAMB16BWE_S36_S36'.
Generating RTLIL representation for module `\RAMB16BWER'.
Generating RTLIL representation for module `\RAMB8BWER'.
Generating RTLIL representation for module `\FIFO16'.
Generating RTLIL representation for module `\RAMB16'.
Generating RTLIL representation for module `\RAMB32_S64_ECC'.
Generating RTLIL representation for module `\FIFO18'.
Generating RTLIL representation for module `\FIFO18_36'.
Generating RTLIL representation for module `\FIFO36'.
Generating RTLIL representation for module `\FIFO36_72'.
Generating RTLIL representation for module `\RAMB18'.
Generating RTLIL representation for module `\RAMB36'.
Generating RTLIL representation for module `\RAMB18SDP'.
Generating RTLIL representation for module `\RAMB36SDP'.
Generating RTLIL representation for module `\FIFO18E1'.
Generating RTLIL representation for module `\FIFO36E1'.
Generating RTLIL representation for module `\FIFO18E2'.
Generating RTLIL representation for module `\FIFO36E2'.
Generating RTLIL representation for module `\RAMB18E2'.
Generating RTLIL representation for module `\RAMB36E2'.
Generating RTLIL representation for module `\URAM288'.
Generating RTLIL representation for module `\URAM288_BASE'.
Generating RTLIL representation for module `\DSP48E'.
Generating RTLIL representation for module `\DSP48E2'.
Generating RTLIL representation for module `\FDDRCPE'.
Generating RTLIL representation for module `\FDDRRSE'.
Generating RTLIL representation for module `\IFDDRCPE'.
Generating RTLIL representation for module `\IFDDRRSE'.
Generating RTLIL representation for module `\OFDDRCPE'.
Generating RTLIL representation for module `\OFDDRRSE'.
Generating RTLIL representation for module `\OFDDRTCPE'.
Generating RTLIL representation for module `\OFDDRTRSE'.
Generating RTLIL representation for module `\IDDR2'.
Generating RTLIL representation for module `\ODDR2'.
Generating RTLIL representation for module `\IDDR'.
Generating RTLIL representation for module `\IDDR_2CLK'.
Generating RTLIL representation for module `\ODDR'.
Generating RTLIL representation for module `\IDELAYCTRL'.
Generating RTLIL representation for module `\IDELAY'.
Generating RTLIL representation for module `\ISERDES'.
Generating RTLIL representation for module `\OSERDES'.
Generating RTLIL representation for module `\IODELAY'.
Generating RTLIL representation for module `\ISERDES_NODELAY'.
Generating RTLIL representation for module `\IODELAYE1'.
Generating RTLIL representation for module `\ISERDESE1'.
Generating RTLIL representation for module `\OSERDESE1'.
Generating RTLIL representation for module `\IDELAYE2'.
Generating RTLIL representation for module `\ODELAYE2'.
Generating RTLIL representation for module `\ISERDESE2'.
Generating RTLIL representation for module `\OSERDESE2'.
Generating RTLIL representation for module `\PHASER_IN'.
Generating RTLIL representation for module `\PHASER_IN_PHY'.
Generating RTLIL representation for module `\PHASER_OUT'.
Generating RTLIL representation for module `\PHASER_OUT_PHY'.
Generating RTLIL representation for module `\PHASER_REF'.
Generating RTLIL representation for module `\PHY_CONTROL'.
Generating RTLIL representation for module `\IDDRE1'.
Generating RTLIL representation for module `\ODDRE1'.
Generating RTLIL representation for module `\IDELAYE3'.
Generating RTLIL representation for module `\ODELAYE3'.
Generating RTLIL representation for module `\ISERDESE3'.
Generating RTLIL representation for module `\OSERDESE3'.
Generating RTLIL representation for module `\BITSLICE_CONTROL'.
Generating RTLIL representation for module `\RIU_OR'.
Generating RTLIL representation for module `\RX_BITSLICE'.
Generating RTLIL representation for module `\RXTX_BITSLICE'.
Generating RTLIL representation for module `\TX_BITSLICE'.
Generating RTLIL representation for module `\TX_BITSLICE_TRI'.
Generating RTLIL representation for module `\IODELAY2'.
Generating RTLIL representation for module `\IODRP2'.
Generating RTLIL representation for module `\IODRP2_MCB'.
Generating RTLIL representation for module `\ISERDES2'.
Generating RTLIL representation for module `\OSERDES2'.
Generating RTLIL representation for module `\IBUF_DLY_ADJ'.
Generating RTLIL representation for module `\IBUF_IBUFDISABLE'.
Generating RTLIL representation for module `\IBUF_INTERMDISABLE'.
Generating RTLIL representation for module `\IBUF_ANALOG'.
Generating RTLIL representation for module `\IBUFE3'.
Generating RTLIL representation for module `\IBUFDS'.
Generating RTLIL representation for module `\IBUFDS_DLY_ADJ'.
Generating RTLIL representation for module `\IBUFDS_IBUFDISABLE'.
Generating RTLIL representation for module `\IBUFDS_INTERMDISABLE'.
Generating RTLIL representation for module `\IBUFDS_DIFF_OUT'.
Generating RTLIL representation for module `\IBUFDS_DIFF_OUT_IBUFDISABLE'.
Generating RTLIL representation for module `\IBUFDS_DIFF_OUT_INTERMDISABLE'.
Generating RTLIL representation for module `\IBUFDSE3'.
Generating RTLIL representation for module `\IBUFDS_DPHY'.
Generating RTLIL representation for module `\IBUFGDS'.
Generating RTLIL representation for module `\IBUFGDS_DIFF_OUT'.
Generating RTLIL representation for module `\IOBUF_DCIEN'.
Generating RTLIL representation for module `\IOBUF_INTERMDISABLE'.
Generating RTLIL representation for module `\IOBUFE3'.
Generating RTLIL representation for module `\IOBUFDS'.
Generating RTLIL representation for module `\IOBUFDS_DCIEN'.
Generating RTLIL representation for module `\IOBUFDS_INTERMDISABLE'.
Generating RTLIL representation for module `\IOBUFDS_DIFF_OUT'.
Generating RTLIL representation for module `\IOBUFDS_DIFF_OUT_DCIEN'.
Generating RTLIL representation for module `\IOBUFDS_DIFF_OUT_INTERMDISABLE'.
Generating RTLIL representation for module `\IOBUFDSE3'.
Generating RTLIL representation for module `\OBUFDS'.
Generating RTLIL representation for module `\OBUFDS_DPHY'.
Generating RTLIL representation for module `\OBUFTDS'.
Generating RTLIL representation for module `\KEEPER'.
Generating RTLIL representation for module `\PULLDOWN'.
Generating RTLIL representation for module `\PULLUP'.
Generating RTLIL representation for module `\DCIRESET'.
Generating RTLIL representation for module `\HPIO_VREF'.
Generating RTLIL representation for module `\BUFGCE'.
Generating RTLIL representation for module `\BUFGCE_1'.
Generating RTLIL representation for module `\BUFGMUX'.
Generating RTLIL representation for module `\BUFGMUX_1'.
Generating RTLIL representation for module `\BUFGMUX_CTRL'.
Generating RTLIL representation for module `\BUFGMUX_VIRTEX4'.
Generating RTLIL representation for module `\BUFG_GT'.
Generating RTLIL representation for module `\BUFG_GT_SYNC'.
Generating RTLIL representation for module `\BUFG_PS'.
Generating RTLIL representation for module `\BUFGCE_DIV'.
Generating RTLIL representation for module `\BUFH'.
Generating RTLIL representation for module `\BUFIO2'.
Generating RTLIL representation for module `\BUFIO2_2CLK'.
Generating RTLIL representation for module `\BUFIO2FB'.
Generating RTLIL representation for module `\BUFPLL'.
Generating RTLIL representation for module `\BUFPLL_MCB'.
Generating RTLIL representation for module `\BUFIO'.
Generating RTLIL representation for module `\BUFIODQS'.
Generating RTLIL representation for module `\BUFR'.
Generating RTLIL representation for module `\BUFMR'.
Generating RTLIL representation for module `\BUFMRCE'.
Generating RTLIL representation for module `\DCM'.
Generating RTLIL representation for module `\DCM_SP'.
Generating RTLIL representation for module `\DCM_CLKGEN'.
Generating RTLIL representation for module `\DCM_ADV'.
Generating RTLIL representation for module `\DCM_BASE'.
Generating RTLIL representation for module `\DCM_PS'.
Generating RTLIL representation for module `\PMCD'.
Generating RTLIL representation for module `\PLL_ADV'.
Generating RTLIL representation for module `\PLL_BASE'.
Generating RTLIL representation for module `\MMCM_ADV'.
Generating RTLIL representation for module `\MMCM_BASE'.
Generating RTLIL representation for module `\MMCME2_ADV'.
Generating RTLIL representation for module `\MMCME2_BASE'.
Generating RTLIL representation for module `\PLLE2_ADV'.
Generating RTLIL representation for module `\PLLE2_BASE'.
Generating RTLIL representation for module `\MMCME3_ADV'.
Generating RTLIL representation for module `\MMCME3_BASE'.
Generating RTLIL representation for module `\PLLE3_ADV'.
Generating RTLIL representation for module `\PLLE3_BASE'.
Generating RTLIL representation for module `\MMCME4_ADV'.
Generating RTLIL representation for module `\MMCME4_BASE'.
Generating RTLIL representation for module `\PLLE4_ADV'.
Generating RTLIL representation for module `\PLLE4_BASE'.
Generating RTLIL representation for module `\BUFT'.
Generating RTLIL representation for module `\IN_FIFO'.
Generating RTLIL representation for module `\OUT_FIFO'.
Generating RTLIL representation for module `\HARD_SYNC'.
Generating RTLIL representation for module `\STARTUP_SPARTAN3'.
Generating RTLIL representation for module `\STARTUP_SPARTAN3E'.
Generating RTLIL representation for module `\STARTUP_SPARTAN3A'.
Generating RTLIL representation for module `\STARTUP_SPARTAN6'.
Generating RTLIL representation for module `\STARTUP_VIRTEX4'.
Generating RTLIL representation for module `\STARTUP_VIRTEX5'.
Generating RTLIL representation for module `\STARTUP_VIRTEX6'.
Generating RTLIL representation for module `\STARTUPE2'.
Generating RTLIL representation for module `\STARTUPE3'.
Generating RTLIL representation for module `\CAPTURE_SPARTAN3'.
Generating RTLIL representation for module `\CAPTURE_SPARTAN3A'.
Generating RTLIL representation for module `\CAPTURE_VIRTEX4'.
Generating RTLIL representation for module `\CAPTURE_VIRTEX5'.
Generating RTLIL representation for module `\CAPTURE_VIRTEX6'.
Generating RTLIL representation for module `\CAPTUREE2'.
Generating RTLIL representation for module `\ICAP_SPARTAN3A'.
Generating RTLIL representation for module `\ICAP_SPARTAN6'.
Generating RTLIL representation for module `\ICAP_VIRTEX4'.
Generating RTLIL representation for module `\ICAP_VIRTEX5'.
Generating RTLIL representation for module `\ICAP_VIRTEX6'.
Generating RTLIL representation for module `\ICAPE2'.
Generating RTLIL representation for module `\ICAPE3'.
Generating RTLIL representation for module `\BSCAN_SPARTAN3'.
Generating RTLIL representation for module `\BSCAN_SPARTAN3A'.
Generating RTLIL representation for module `\BSCAN_SPARTAN6'.
Generating RTLIL representation for module `\BSCAN_VIRTEX4'.
Generating RTLIL representation for module `\BSCAN_VIRTEX5'.
Generating RTLIL representation for module `\BSCAN_VIRTEX6'.
Generating RTLIL representation for module `\BSCANE2'.
Generating RTLIL representation for module `\DNA_PORT'.
Generating RTLIL representation for module `\DNA_PORTE2'.
Generating RTLIL representation for module `\FRAME_ECC_VIRTEX4'.
Generating RTLIL representation for module `\FRAME_ECC_VIRTEX5'.
Generating RTLIL representation for module `\FRAME_ECC_VIRTEX6'.
Generating RTLIL representation for module `\FRAME_ECCE2'.
Generating RTLIL representation for module `\FRAME_ECCE3'.
Generating RTLIL representation for module `\FRAME_ECCE4'.
Generating RTLIL representation for module `\USR_ACCESS_VIRTEX4'.
Generating RTLIL representation for module `\USR_ACCESS_VIRTEX5'.
Generating RTLIL representation for module `\USR_ACCESS_VIRTEX6'.
Generating RTLIL representation for module `\USR_ACCESSE2'.
Generating RTLIL representation for module `\POST_CRC_INTERNAL'.
Generating RTLIL representation for module `\SUSPEND_SYNC'.
Generating RTLIL representation for module `\KEY_CLEAR'.
Generating RTLIL representation for module `\MASTER_JTAG'.
Generating RTLIL representation for module `\SPI_ACCESS'.
Generating RTLIL representation for module `\EFUSE_USR'.
Generating RTLIL representation for module `\SYSMON'.
Generating RTLIL representation for module `\XADC'.
Generating RTLIL representation for module `\SYSMONE1'.
Generating RTLIL representation for module `\SYSMONE4'.
Generating RTLIL representation for module `\GTPA1_DUAL'.
Generating RTLIL representation for module `\GT11_CUSTOM'.
Generating RTLIL representation for module `\GT11_DUAL'.
Generating RTLIL representation for module `\GT11CLK'.
Generating RTLIL representation for module `\GT11CLK_MGT'.
Generating RTLIL representation for module `\GTP_DUAL'.
Generating RTLIL representation for module `\GTX_DUAL'.
Generating RTLIL representation for module `\CRC32'.
Generating RTLIL representation for module `\CRC64'.
Generating RTLIL representation for module `\GTHE1_QUAD'.
Generating RTLIL representation for module `\GTXE1'.
Generating RTLIL representation for module `\IBUFDS_GTXE1'.
Generating RTLIL representation for module `\IBUFDS_GTHE1'.
Generating RTLIL representation for module `\GTHE2_CHANNEL'.
Generating RTLIL representation for module `\GTHE2_COMMON'.
Generating RTLIL representation for module `\GTPE2_CHANNEL'.
Generating RTLIL representation for module `\GTPE2_COMMON'.
Generating RTLIL representation for module `\GTXE2_CHANNEL'.
Generating RTLIL representation for module `\GTXE2_COMMON'.
Generating RTLIL representation for module `\IBUFDS_GTE2'.
Generating RTLIL representation for module `\GTHE3_CHANNEL'.
Generating RTLIL representation for module `\GTHE3_COMMON'.
Generating RTLIL representation for module `\GTYE3_CHANNEL'.
Generating RTLIL representation for module `\GTYE3_COMMON'.
Generating RTLIL representation for module `\IBUFDS_GTE3'.
Generating RTLIL representation for module `\OBUFDS_GTE3'.
Generating RTLIL representation for module `\OBUFDS_GTE3_ADV'.
Generating RTLIL representation for module `\GTHE4_CHANNEL'.
Generating RTLIL representation for module `\GTHE4_COMMON'.
Generating RTLIL representation for module `\GTYE4_CHANNEL'.
Generating RTLIL representation for module `\GTYE4_COMMON'.
Generating RTLIL representation for module `\IBUFDS_GTE4'.
Generating RTLIL representation for module `\OBUFDS_GTE4'.
Generating RTLIL representation for module `\OBUFDS_GTE4_ADV'.
Generating RTLIL representation for module `\GTM_DUAL'.
Generating RTLIL representation for module `\IBUFDS_GTM'.
Generating RTLIL representation for module `\OBUFDS_GTM'.
Generating RTLIL representation for module `\OBUFDS_GTM_ADV'.
Generating RTLIL representation for module `\HSDAC'.
Generating RTLIL representation for module `\HSADC'.
Generating RTLIL representation for module `\RFDAC'.
Generating RTLIL representation for module `\RFADC'.
Generating RTLIL representation for module `\PCIE_A1'.
Generating RTLIL representation for module `\PCIE_EP'.
Generating RTLIL representation for module `\PCIE_2_0'.
Generating RTLIL representation for module `\PCIE_2_1'.
Generating RTLIL representation for module `\PCIE_3_0'.
Generating RTLIL representation for module `\PCIE_3_1'.
Generating RTLIL representation for module `\PCIE40E4'.
Generating RTLIL representation for module `\PCIE4CE4'.
Generating RTLIL representation for module `\EMAC'.
Generating RTLIL representation for module `\TEMAC'.
Generating RTLIL representation for module `\TEMAC_SINGLE'.
Generating RTLIL representation for module `\CMAC'.
Generating RTLIL representation for module `\CMACE4'.
Generating RTLIL representation for module `\MCB'.
Generating RTLIL representation for module `\HBM_REF_CLK'.
Generating RTLIL representation for module `\HBM_SNGLBLI_INTF_APB'.
Generating RTLIL representation for module `\HBM_SNGLBLI_INTF_AXI'.
Generating RTLIL representation for module `\HBM_ONE_STACK_INTF'.
Generating RTLIL representation for module `\HBM_TWO_STACK_INTF'.
Generating RTLIL representation for module `\PPC405_ADV'.
Generating RTLIL representation for module `\PPC440'.
Generating RTLIL representation for module `\PS7'.
Generating RTLIL representation for module `\PS8'.
Generating RTLIL representation for module `\ILKN'.
Generating RTLIL representation for module `\ILKNE4'.
Generating RTLIL representation for module `\VCU'.
Generating RTLIL representation for module `\FE'.
Successfully finished Verilog frontend.

5.3. Executing HIERARCHY pass (managing design hierarchy).

5.3.1. Analyzing design hierarchy..
Top module:  \fir8_wrapper
Used module:     \fir8
Used module:         \fir_pe

5.3.2. Analyzing design hierarchy..
Top module:  \fir8_wrapper
Used module:     \fir8
Used module:         \fir_pe
Removed 0 unused modules.

5.4. Executing PROC pass (convert processes to netlists).

5.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 3 switch rules as full_case in process $proc$../../../fir8_wrapper.v:28$3 in module fir8_wrapper.
Removed a total of 0 dead cases.

5.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 35 assignments to connections.

5.4.4. Executing PROC_INIT pass (extract init attributes).

5.4.5. Executing PROC_ARST pass (detect async resets in processes).

5.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~3 debug messages>

5.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\fir8.$proc$../../../../source/fir8.v:0$68'.
Creating decoders for process `\fir_pe.$proc$../../../../../2-5_Lab3_FIR8/rtl_verilog/fir_pe.v:34$26'.
Creating decoders for process `\fir_pe.$proc$../../../../../2-5_Lab3_FIR8/rtl_verilog/fir_pe.v:29$25'.
Creating decoders for process `\fir_pe.$proc$../../../../../2-5_Lab3_FIR8/rtl_verilog/fir_pe.v:24$23'.
Creating decoders for process `\fir8_wrapper.$proc$../../../fir8_wrapper.v:28$3'.
     1/18: $3$mem2reg_rd$\vectOut$../../../fir8_wrapper.v:45$1_DATA[7:0]$22
     2/18: $2$memwr$\stimIn$../../../fir8_wrapper.v:44$2_EN[7:0]$21
     3/18: $2$memwr$\stimIn$../../../fir8_wrapper.v:44$2_DATA[7:0]$20
     4/18: $2$memwr$\stimIn$../../../fir8_wrapper.v:44$2_ADDR[2:0]$19
     5/18: $2$mem2reg_rd$\vectOut$../../../fir8_wrapper.v:45$1_DATA[7:0]$18
     6/18: $2$mem2reg_rd$\vectOut$../../../fir8_wrapper.v:45$1_ADDR[1:0]$17
     7/18: $0\Yin[15:0] [15:8]
     8/18: $0\Yin[15:0] [7:0]
     9/18: $1$memwr$\stimIn$../../../fir8_wrapper.v:44$2_DATA[7:0]$12
    10/18: $1$memwr$\stimIn$../../../fir8_wrapper.v:44$2_ADDR[2:0]$11
    11/18: $1$mem2reg_rd$\vectOut$../../../fir8_wrapper.v:45$1_DATA[7:0]$10
    12/18: $1$mem2reg_rd$\vectOut$../../../fir8_wrapper.v:45$1_ADDR[1:0]$9
    13/18: $0\vectOut[2][7:0]
    14/18: $0\vectOut[1][7:0]
    15/18: $0\vectOut[0][7:0]
    16/18: $1$memwr$\stimIn$../../../fir8_wrapper.v:44$2_EN[7:0]$13
    17/18: $0\Xin[7:0]
    18/18: $0\Dout_emu[7:0]

5.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\fir8.\X[0]' from process `\fir8.$proc$../../../../source/fir8.v:0$68'.
No latch inferred for signal `\fir8.\X[1]' from process `\fir8.$proc$../../../../source/fir8.v:0$68'.
No latch inferred for signal `\fir8.\X[2]' from process `\fir8.$proc$../../../../source/fir8.v:0$68'.
No latch inferred for signal `\fir8.\X[3]' from process `\fir8.$proc$../../../../source/fir8.v:0$68'.
No latch inferred for signal `\fir8.\X[4]' from process `\fir8.$proc$../../../../source/fir8.v:0$68'.
No latch inferred for signal `\fir8.\X[5]' from process `\fir8.$proc$../../../../source/fir8.v:0$68'.
No latch inferred for signal `\fir8.\X[6]' from process `\fir8.$proc$../../../../source/fir8.v:0$68'.
No latch inferred for signal `\fir8.\X[7]' from process `\fir8.$proc$../../../../source/fir8.v:0$68'.
No latch inferred for signal `\fir8.\X[8]' from process `\fir8.$proc$../../../../source/fir8.v:0$68'.
No latch inferred for signal `\fir8.\Y[0]' from process `\fir8.$proc$../../../../source/fir8.v:0$68'.
No latch inferred for signal `\fir8.\Y[1]' from process `\fir8.$proc$../../../../source/fir8.v:0$68'.
No latch inferred for signal `\fir8.\Y[2]' from process `\fir8.$proc$../../../../source/fir8.v:0$68'.
No latch inferred for signal `\fir8.\Y[3]' from process `\fir8.$proc$../../../../source/fir8.v:0$68'.
No latch inferred for signal `\fir8.\Y[4]' from process `\fir8.$proc$../../../../source/fir8.v:0$68'.
No latch inferred for signal `\fir8.\Y[5]' from process `\fir8.$proc$../../../../source/fir8.v:0$68'.
No latch inferred for signal `\fir8.\Y[6]' from process `\fir8.$proc$../../../../source/fir8.v:0$68'.
No latch inferred for signal `\fir8.\Y[7]' from process `\fir8.$proc$../../../../source/fir8.v:0$68'.
No latch inferred for signal `\fir8.\Y[8]' from process `\fir8.$proc$../../../../source/fir8.v:0$68'.
No latch inferred for signal `\fir8.\C[0]' from process `\fir8.$proc$../../../../source/fir8.v:0$68'.
No latch inferred for signal `\fir8.\C[1]' from process `\fir8.$proc$../../../../source/fir8.v:0$68'.
No latch inferred for signal `\fir8.\C[2]' from process `\fir8.$proc$../../../../source/fir8.v:0$68'.
No latch inferred for signal `\fir8.\C[3]' from process `\fir8.$proc$../../../../source/fir8.v:0$68'.
No latch inferred for signal `\fir8.\C[4]' from process `\fir8.$proc$../../../../source/fir8.v:0$68'.
No latch inferred for signal `\fir8.\C[5]' from process `\fir8.$proc$../../../../source/fir8.v:0$68'.
No latch inferred for signal `\fir8.\C[6]' from process `\fir8.$proc$../../../../source/fir8.v:0$68'.
No latch inferred for signal `\fir8.\C[7]' from process `\fir8.$proc$../../../../source/fir8.v:0$68'.

5.4.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\fir_pe.\Xout' using process `\fir_pe.$proc$../../../../../2-5_Lab3_FIR8/rtl_verilog/fir_pe.v:34$26'.
  created $dff cell `$procdff$1254' with positive edge clock.
Creating register for signal `\fir_pe.\Yout' using process `\fir_pe.$proc$../../../../../2-5_Lab3_FIR8/rtl_verilog/fir_pe.v:34$26'.
  created $dff cell `$procdff$1255' with positive edge clock.
Creating register for signal `\fir_pe.\rYin' using process `\fir_pe.$proc$../../../../../2-5_Lab3_FIR8/rtl_verilog/fir_pe.v:29$25'.
  created $dff cell `$procdff$1256' with positive edge clock.
Creating register for signal `\fir_pe.\mul' using process `\fir_pe.$proc$../../../../../2-5_Lab3_FIR8/rtl_verilog/fir_pe.v:24$23'.
  created $dff cell `$procdff$1257' with positive edge clock.
Creating register for signal `\fir8_wrapper.\Dout_emu' using process `\fir8_wrapper.$proc$../../../fir8_wrapper.v:28$3'.
  created $dff cell `$procdff$1258' with positive edge clock.
Creating register for signal `\fir8_wrapper.\Xin' using process `\fir8_wrapper.$proc$../../../fir8_wrapper.v:28$3'.
  created $dff cell `$procdff$1259' with positive edge clock.
Creating register for signal `\fir8_wrapper.\Yin' using process `\fir8_wrapper.$proc$../../../fir8_wrapper.v:28$3'.
  created $dff cell `$procdff$1260' with positive edge clock.
Creating register for signal `\fir8_wrapper.\vectOut[0]' using process `\fir8_wrapper.$proc$../../../fir8_wrapper.v:28$3'.
  created $dff cell `$procdff$1261' with positive edge clock.
Creating register for signal `\fir8_wrapper.\vectOut[1]' using process `\fir8_wrapper.$proc$../../../fir8_wrapper.v:28$3'.
  created $dff cell `$procdff$1262' with positive edge clock.
Creating register for signal `\fir8_wrapper.\vectOut[2]' using process `\fir8_wrapper.$proc$../../../fir8_wrapper.v:28$3'.
  created $dff cell `$procdff$1263' with positive edge clock.
Creating register for signal `\fir8_wrapper.$mem2reg_rd$\vectOut$../../../fir8_wrapper.v:45$1_ADDR' using process `\fir8_wrapper.$proc$../../../fir8_wrapper.v:28$3'.
  created $dff cell `$procdff$1264' with positive edge clock.
Creating register for signal `\fir8_wrapper.$mem2reg_rd$\vectOut$../../../fir8_wrapper.v:45$1_DATA' using process `\fir8_wrapper.$proc$../../../fir8_wrapper.v:28$3'.
  created $dff cell `$procdff$1265' with positive edge clock.
Creating register for signal `\fir8_wrapper.$memwr$\stimIn$../../../fir8_wrapper.v:44$2_ADDR' using process `\fir8_wrapper.$proc$../../../fir8_wrapper.v:28$3'.
  created $dff cell `$procdff$1266' with positive edge clock.
Creating register for signal `\fir8_wrapper.$memwr$\stimIn$../../../fir8_wrapper.v:44$2_DATA' using process `\fir8_wrapper.$proc$../../../fir8_wrapper.v:28$3'.
  created $dff cell `$procdff$1267' with positive edge clock.
Creating register for signal `\fir8_wrapper.$memwr$\stimIn$../../../fir8_wrapper.v:44$2_EN' using process `\fir8_wrapper.$proc$../../../fir8_wrapper.v:28$3'.
  created $dff cell `$procdff$1268' with positive edge clock.

5.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

5.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `fir8.$proc$../../../../source/fir8.v:0$68'.
Removing empty process `fir_pe.$proc$../../../../../2-5_Lab3_FIR8/rtl_verilog/fir_pe.v:34$26'.
Removing empty process `fir_pe.$proc$../../../../../2-5_Lab3_FIR8/rtl_verilog/fir_pe.v:29$25'.
Removing empty process `fir_pe.$proc$../../../../../2-5_Lab3_FIR8/rtl_verilog/fir_pe.v:24$23'.
Found and cleaned up 3 empty switches in `\fir8_wrapper.$proc$../../../fir8_wrapper.v:28$3'.
Removing empty process `fir8_wrapper.$proc$../../../fir8_wrapper.v:28$3'.
Cleaned up 3 empty switches.

5.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir8.
Optimizing module fir_pe.
Optimizing module fir8_wrapper.
<suppressed ~1 debug messages>

5.5. Executing TRIBUF pass.

5.6. Executing DEMINOUT pass (demote inout ports to input or output).

5.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir8.
Optimizing module fir_pe.
Optimizing module fir8_wrapper.

5.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir8..
Finding unused cells or wires in module \fir_pe..
Finding unused cells or wires in module \fir8_wrapper..
Removed 11 unused cells and 132 unused wires.
<suppressed ~14 debug messages>

5.9. Executing CHECK pass (checking for obvious problems).
Checking module fir8...
Checking module fir8_wrapper...
Checking module fir_pe...
Found and reported 0 problems.

5.10. Executing OPT pass (performing simple optimizations).

5.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir8.
Optimizing module fir8_wrapper.
Optimizing module fir_pe.

5.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir8'.
Finding identical cells in module `\fir8_wrapper'.
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

5.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fir8..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fir8_wrapper..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$1171.
    dead port 1/2 on $mux $procmux$1174.
    dead port 1/2 on $mux $procmux$1180.
    dead port 1/2 on $mux $procmux$1186.
    dead port 1/2 on $mux $procmux$1192.
Running muxtree optimizer on module \fir_pe..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 5 multiplexer ports.
<suppressed ~10 debug messages>

5.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fir8.
  Optimizing cells in module \fir8_wrapper.
    Consolidated identical input bits for $mux cell $procmux$1177:
      Old ports: A=8'11111111, B=8'00000000, Y=$procmux$1177_Y
      New ports: A=1'1, B=1'0, Y=$procmux$1177_Y [0]
      New connections: $procmux$1177_Y [7:1] = { $procmux$1177_Y [0] $procmux$1177_Y [0] $procmux$1177_Y [0] $procmux$1177_Y [0] $procmux$1177_Y [0] $procmux$1177_Y [0] $procmux$1177_Y [0] }
  Optimizing cells in module \fir8_wrapper.
    Consolidated identical input bits for $mux cell $procmux$1243:
      Old ports: A=$2$memwr$\stimIn$../../../fir8_wrapper.v:44$2_EN[7:0]$21, B=8'00000000, Y=$0$memwr$\stimIn$../../../fir8_wrapper.v:44$2_EN[7:0]$8
      New ports: A=$procmux$1177_Y [0], B=1'0, Y=$0$memwr$\stimIn$../../../fir8_wrapper.v:44$2_EN[7:0]$8 [0]
      New connections: $0$memwr$\stimIn$../../../fir8_wrapper.v:44$2_EN[7:0]$8 [7:1] = { $0$memwr$\stimIn$../../../fir8_wrapper.v:44$2_EN[7:0]$8 [0] $0$memwr$\stimIn$../../../fir8_wrapper.v:44$2_EN[7:0]$8 [0] $0$memwr$\stimIn$../../../fir8_wrapper.v:44$2_EN[7:0]$8 [0] $0$memwr$\stimIn$../../../fir8_wrapper.v:44$2_EN[7:0]$8 [0] $0$memwr$\stimIn$../../../fir8_wrapper.v:44$2_EN[7:0]$8 [0] $0$memwr$\stimIn$../../../fir8_wrapper.v:44$2_EN[7:0]$8 [0] $0$memwr$\stimIn$../../../fir8_wrapper.v:44$2_EN[7:0]$8 [0] }
  Optimizing cells in module \fir8_wrapper.
  Optimizing cells in module \fir_pe.
Performed a total of 2 changes.

5.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir8'.
Finding identical cells in module `\fir8_wrapper'.
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

5.10.6. Executing OPT_DFF pass (perform DFF optimizations).

5.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir8..
Finding unused cells or wires in module \fir8_wrapper..
Finding unused cells or wires in module \fir_pe..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

5.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir8.
Optimizing module fir8_wrapper.
Optimizing module fir_pe.

5.10.9. Rerunning OPT passes. (Maybe there is more to do..)

5.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fir8..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fir8_wrapper..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fir_pe..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

5.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fir8.
  Optimizing cells in module \fir8_wrapper.
  Optimizing cells in module \fir_pe.
Performed a total of 0 changes.

5.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir8'.
Finding identical cells in module `\fir8_wrapper'.
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

5.10.13. Executing OPT_DFF pass (perform DFF optimizations).

5.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir8..
Finding unused cells or wires in module \fir8_wrapper..
Finding unused cells or wires in module \fir_pe..

5.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir8.
Optimizing module fir8_wrapper.
Optimizing module fir_pe.

5.10.16. Finished OPT passes. (There is nothing left to do.)

5.11. Executing FSM pass (extract and optimize FSM).

5.11.1. Executing FSM_DETECT pass (finding FSMs in design).

5.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

5.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

5.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir8..
Finding unused cells or wires in module \fir8_wrapper..
Finding unused cells or wires in module \fir_pe..

5.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

5.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

5.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

5.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

5.12. Executing OPT pass (performing simple optimizations).

5.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir8.
Optimizing module fir8_wrapper.
Optimizing module fir_pe.

5.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir8'.
Finding identical cells in module `\fir8_wrapper'.
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

5.12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fir8..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fir8_wrapper..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fir_pe..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

5.12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fir8.
  Optimizing cells in module \fir8_wrapper.
  Optimizing cells in module \fir_pe.
Performed a total of 0 changes.

5.12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir8'.
Finding identical cells in module `\fir8_wrapper'.
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

5.12.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$1263 ($dff) from module fir8_wrapper (D = \Yout [15:8], Q = \vectOut[2]).
Adding EN signal on $procdff$1262 ($dff) from module fir8_wrapper (D = \Yout [7:0], Q = \vectOut[1]).
Adding EN signal on $procdff$1261 ($dff) from module fir8_wrapper (D = \Xout, Q = \vectOut[0]).
Adding EN signal on $procdff$1260 ($dff) from module fir8_wrapper (D = { $memrd$\stimIn$../../../fir8_wrapper.v:34$16_DATA $memrd$\stimIn$../../../fir8_wrapper.v:33$15_DATA }, Q = \Yin).
Adding EN signal on $procdff$1259 ($dff) from module fir8_wrapper (D = $memrd$\stimIn$../../../fir8_wrapper.v:32$14_DATA, Q = \Xin).
Adding EN signal on $procdff$1258 ($dff) from module fir8_wrapper (D = $3$mem2reg_rd$\vectOut$../../../fir8_wrapper.v:45$1_DATA[7:0]$22, Q = \Dout_emu).

5.12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir8..
Finding unused cells or wires in module \fir8_wrapper..
Finding unused cells or wires in module \fir_pe..
Removed 11 unused cells and 10 unused wires.
<suppressed ~12 debug messages>

5.12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir8.
Optimizing module fir8_wrapper.
Optimizing module fir_pe.

5.12.9. Rerunning OPT passes. (Maybe there is more to do..)

5.12.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fir8..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fir8_wrapper..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fir_pe..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

5.12.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fir8.
  Optimizing cells in module \fir8_wrapper.
  Optimizing cells in module \fir_pe.
Performed a total of 0 changes.

5.12.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir8'.
Finding identical cells in module `\fir8_wrapper'.
<suppressed ~15 debug messages>
Finding identical cells in module `\fir_pe'.
Removed a total of 5 cells.

5.12.13. Executing OPT_DFF pass (perform DFF optimizations).

5.12.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir8..
Finding unused cells or wires in module \fir8_wrapper..
Finding unused cells or wires in module \fir_pe..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

5.12.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir8.
Optimizing module fir8_wrapper.
Optimizing module fir_pe.

5.12.16. Rerunning OPT passes. (Maybe there is more to do..)

5.12.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fir8..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fir8_wrapper..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fir_pe..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

5.12.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fir8.
  Optimizing cells in module \fir8_wrapper.
  Optimizing cells in module \fir_pe.
Performed a total of 0 changes.

5.12.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir8'.
Finding identical cells in module `\fir8_wrapper'.
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

5.12.20. Executing OPT_DFF pass (perform DFF optimizations).

5.12.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir8..
Finding unused cells or wires in module \fir8_wrapper..
Finding unused cells or wires in module \fir_pe..

5.12.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir8.
Optimizing module fir8_wrapper.
Optimizing module fir_pe.

5.12.23. Finished OPT passes. (There is nothing left to do.)

5.13. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 address bits (of 3) from memory init port fir8_wrapper.$auto$proc_memwr.cc:45:proc_memwr$1269 (stimIn).
Removed top 30 address bits (of 32) from memory read port fir8_wrapper.$memrd$\stimIn$../../../fir8_wrapper.v:32$14 (stimIn).
Removed top 30 address bits (of 32) from memory read port fir8_wrapper.$memrd$\stimIn$../../../fir8_wrapper.v:33$15 (stimIn).
Removed top 30 address bits (of 32) from memory read port fir8_wrapper.$memrd$\stimIn$../../../fir8_wrapper.v:34$16 (stimIn).
Removed top 1 bits (of 2) from port B of cell fir8_wrapper.$procmux$1168_CMP0 ($eq).
Removed top 1 bits (of 3) from mux cell fir8_wrapper.$procmux$1216 ($mux).
Removed top 1 bits (of 3) from mux cell fir8_wrapper.$procmux$1189 ($mux).
Removed top 1 bits (of 3) from wire fir8_wrapper.$0$memwr$\stimIn$../../../fir8_wrapper.v:44$2_ADDR[2:0]$6.
Removed top 1 bits (of 3) from wire fir8_wrapper.$2$memwr$\stimIn$../../../fir8_wrapper.v:44$2_ADDR[2:0]$19.

5.14. Executing PEEPOPT pass (run peephole optimizers).

5.15. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir8..
Finding unused cells or wires in module \fir8_wrapper..
Finding unused cells or wires in module \fir_pe..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

5.16. Executing PMUX2SHIFTX pass.
Inspecting $pmux cell fir8_wrapper/$procmux$1166.
  data width: 8 (next power-of-2 = 8, log2 = 3)
  checking ctrl signal \Addr_emu [1:0]
    best permutation: \Addr_emu [1:0]
    best xor mask: 2'00
      0: 2'10 -> 2'10 -> 2'10: \vectOut[2]
      1: 2'01 -> 2'01 -> 2'01: \vectOut[1]
      2: 2'00 -> 2'00 -> 2'00: \vectOut[0]
    choices: 3
    min choice: 0
    max choice: 2
    range density: 100%
    absolute density: 100%
    full density: 75%
    update to full case.
    new min choice: 0
    new max choice: 3
    full case: true
    created $shiftx cell $auto$pmux2shiftx.cc:712:execute$1297.
Removed 3 unused cells and 3 unused wires.

5.17. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\stimIn'[0] in module `\fir8_wrapper': merging output FF to cell.
    Write port 0: don't care on collision.
Checking read port `\stimIn'[1] in module `\fir8_wrapper': merging output FF to cell.
    Write port 0: don't care on collision.
Checking read port `\stimIn'[2] in module `\fir8_wrapper': merging output FF to cell.
    Write port 0: don't care on collision.

5.18. Executing TECHMAP pass (map to technology primitives).

5.18.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

5.18.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/xilinx/xc7_dsp_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/xilinx/xc7_dsp_map.v' to AST representation.
Generating RTLIL representation for module `\$__MUL25X18'.
Successfully finished Verilog frontend.

5.18.3. Continuing TECHMAP pass.
Using template $paramod$a401ee114c0c9b2ce72be77ae746d4193a701a25\_80_mul for cells of type $mul.
Using template $paramod$2eefbd5b9110a217e13141bfd294cb0b740b282a\_80_mul for cells of type $mul.
Using template $paramod$09e06b97c1c3281a03f038b874a581fe14aa196c\$__MUL25X18 for cells of type $__MUL25X18.
No more expansions possible.
<suppressed ~128 debug messages>

5.19. Executing OPT_EXPR pass (perform const folding).

5.20. Executing WREDUCE pass (reducing word size of cells).

5.21. Executing XILINX_DSP pass (pack resources into DSPs).
Analysing fir_pe.$mul$../../../../../2-5_Lab3_FIR8/rtl_verilog/fir_pe.v:26$24 for Xilinx DSP packing.
  postadder $add$../../../../../2-5_Lab3_FIR8/rtl_verilog/fir_pe.v:37$27 ($add)
  clock: \clk (posedge) ffM:$procdff$1257 ffP:$procdff$1255
  clock: \clk (posedge) ffC:$procdff$1256
<suppressed ~15 debug messages>

5.22. Executing TECHMAP pass (map to technology primitives).

5.22.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

5.22.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lcu.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lcu.v' to AST representation.
Generating RTLIL representation for module `\_80_lcu_cmp_'.
Generating RTLIL representation for module `\$__CMP2LCU'.
Successfully finished Verilog frontend.

5.22.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~7 debug messages>

5.23. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module fir8:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module fir8_wrapper:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module fir_pe:
  created 0 $alu and 0 $macc cells.

5.24. Executing SHARE pass (SAT-based resource sharing).

5.25. Executing OPT pass (performing simple optimizations).

5.25.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir8.
Optimizing module fir8_wrapper.
Optimizing module fir_pe.

5.25.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir8'.
Finding identical cells in module `\fir8_wrapper'.
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

5.25.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fir8..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fir8_wrapper..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/5 on $pmux $procmux$1166.
    dead port 2/5 on $pmux $procmux$1166.
    dead port 3/5 on $pmux $procmux$1166.
    dead port 5/5 on $pmux $procmux$1166.
Running muxtree optimizer on module \fir_pe..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 4 multiplexer ports.
<suppressed ~4 debug messages>

5.25.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fir8.
  Optimizing cells in module \fir8_wrapper.
  Optimizing cells in module \fir_pe.
Performed a total of 0 changes.

5.25.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir8'.
Finding identical cells in module `\fir8_wrapper'.
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

5.25.6. Executing OPT_DFF pass (perform DFF optimizations).

5.25.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir8..
Finding unused cells or wires in module \fir8_wrapper..
Finding unused cells or wires in module \fir_pe..
Removed 5 unused cells and 47 unused wires.
<suppressed ~9 debug messages>

5.25.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir8.
Optimizing module fir8_wrapper.
Optimizing module fir_pe.

5.25.9. Rerunning OPT passes. (Maybe there is more to do..)

5.25.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fir8..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fir8_wrapper..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fir_pe..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

5.25.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fir8.
  Optimizing cells in module \fir8_wrapper.
  Optimizing cells in module \fir_pe.
Performed a total of 0 changes.

5.25.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir8'.
Finding identical cells in module `\fir8_wrapper'.
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

5.25.13. Executing OPT_DFF pass (perform DFF optimizations).

5.25.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir8..
Finding unused cells or wires in module \fir8_wrapper..
Finding unused cells or wires in module \fir_pe..

5.25.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir8.
Optimizing module fir8_wrapper.
Optimizing module fir_pe.

5.25.16. Finished OPT passes. (There is nothing left to do.)

5.26. Executing MEMORY pass.

5.26.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

5.26.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

5.26.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

5.26.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

5.26.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

5.26.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir8..
Finding unused cells or wires in module \fir8_wrapper..
Finding unused cells or wires in module \fir_pe..

5.26.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating read ports of memory fir8_wrapper.stimIn by address:
  Merging ports 1, 2 (address 2'01).
Consolidating read ports of memory fir8_wrapper.stimIn by address:
  Merging ports 0, 1 (address 2'10).

5.26.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

5.26.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir8..
Finding unused cells or wires in module \fir8_wrapper..
Finding unused cells or wires in module \fir_pe..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

5.26.10. Executing MEMORY_COLLECT pass (generating $mem cells).

5.27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir8..
Finding unused cells or wires in module \fir8_wrapper..
Finding unused cells or wires in module \fir_pe..

5.28. Executing MEMORY_LIBMAP pass (mapping memories to cells).
using FF mapping for memory fir8_wrapper.stimIn
<suppressed ~1797 debug messages>

5.29. Executing TECHMAP pass (map to technology primitives).

5.29.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/xilinx/lutrams_xc5v_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/xilinx/lutrams_xc5v_map.v' to AST representation.
Generating RTLIL representation for module `\$__XILINX_LUTRAM_SP_'.
Generating RTLIL representation for module `\$__XILINX_LUTRAM_DP_'.
Generating RTLIL representation for module `\$__XILINX_LUTRAM_QP_'.
Generating RTLIL representation for module `\$__XILINX_LUTRAM_OP_'.
Generating RTLIL representation for module `\$__XILINX_LUTRAM_SDP_'.
Generating RTLIL representation for module `\$__XILINX_LUTRAM_64X8SW_'.
Generating RTLIL representation for module `\$__XILINX_LUTRAM_32X16DR8_'.
Successfully finished Verilog frontend.

5.29.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~9 debug messages>

5.30. Executing TECHMAP pass (map to technology primitives).

5.30.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/xilinx/brams_xc6v_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/xilinx/brams_xc6v_map.v' to AST representation.
Generating RTLIL representation for module `\$__XILINX_BLOCKRAM_TDP_'.
Generating RTLIL representation for module `\$__XILINX_BLOCKRAM_SDP_'.
Successfully finished Verilog frontend.

5.30.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

5.31. Executing OPT pass (performing simple optimizations).

5.31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir8.
Optimizing module fir8_wrapper.
<suppressed ~5 debug messages>
Optimizing module fir_pe.

5.31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir8'.
Finding identical cells in module `\fir8_wrapper'.
<suppressed ~3 debug messages>
Finding identical cells in module `\fir_pe'.
Removed a total of 1 cells.

5.31.3. Executing OPT_DFF pass (perform DFF optimizations).

5.31.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir8..
Finding unused cells or wires in module \fir8_wrapper..
Finding unused cells or wires in module \fir_pe..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

5.31.5. Finished fast OPT passes.

5.32. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \stimIn in module \fir8_wrapper:
  created 4 $dff cells and 0 static cells of width 8.
Extracted data FF from read port 0 of fir8_wrapper.stimIn: $\stimIn$rdreg[0]
  read interface: 1 $dff and 0 $mux cells.
  write interface: 4 write mux blocks.

5.33. Executing OPT pass (performing simple optimizations).

5.33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir8.
Optimizing module fir8_wrapper.
<suppressed ~9 debug messages>
Optimizing module fir_pe.

5.33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir8'.
Finding identical cells in module `\fir8_wrapper'.
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

5.33.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fir8..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fir8_wrapper..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fir_pe..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

5.33.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fir8.
  Optimizing cells in module \fir8_wrapper.
  Optimizing cells in module \fir_pe.
Performed a total of 0 changes.

5.33.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir8'.
Finding identical cells in module `\fir8_wrapper'.
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

5.33.6. Executing OPT_SHARE pass.

5.33.7. Executing OPT_DFF pass (perform DFF optimizations).

5.33.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir8..
Finding unused cells or wires in module \fir8_wrapper..
Finding unused cells or wires in module \fir_pe..
Removed 8 unused cells and 19 unused wires.
<suppressed ~9 debug messages>

5.33.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir8.
Optimizing module fir8_wrapper.
Optimizing module fir_pe.

5.33.10. Rerunning OPT passes. (Maybe there is more to do..)

5.33.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fir8..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fir8_wrapper..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fir_pe..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

5.33.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fir8.
  Optimizing cells in module \fir8_wrapper.
  Optimizing cells in module \fir_pe.
Performed a total of 0 changes.

5.33.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir8'.
Finding identical cells in module `\fir8_wrapper'.
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

5.33.14. Executing OPT_SHARE pass.

5.33.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\stimIn[3]$1676 ($dff) from module fir8_wrapper (D = \Din_emu, Q = \stimIn[3]).
Adding EN signal on $memory\stimIn[2]$1674 ($dff) from module fir8_wrapper (D = \Din_emu, Q = \stimIn[2]).
Adding EN signal on $memory\stimIn[1]$1672 ($dff) from module fir8_wrapper (D = \Din_emu, Q = \stimIn[1]).
Adding EN signal on $memory\stimIn[0]$1670 ($dff) from module fir8_wrapper (D = \Din_emu, Q = \stimIn[0]).

5.33.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir8..
Finding unused cells or wires in module \fir8_wrapper..
Finding unused cells or wires in module \fir_pe..
Removed 4 unused cells and 4 unused wires.
<suppressed ~5 debug messages>

5.33.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir8.
Optimizing module fir8_wrapper.
Optimizing module fir_pe.

5.33.18. Rerunning OPT passes. (Maybe there is more to do..)

5.33.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fir8..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fir8_wrapper..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fir_pe..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

5.33.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fir8.
  Optimizing cells in module \fir8_wrapper.
  Optimizing cells in module \fir_pe.
Performed a total of 0 changes.

5.33.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir8'.
Finding identical cells in module `\fir8_wrapper'.
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

5.33.22. Executing OPT_SHARE pass.

5.33.23. Executing OPT_DFF pass (perform DFF optimizations).

5.33.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir8..
Finding unused cells or wires in module \fir8_wrapper..
Finding unused cells or wires in module \fir_pe..

5.33.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir8.
Optimizing module fir8_wrapper.
Optimizing module fir_pe.

5.33.26. Finished OPT passes. (There is nothing left to do.)

5.34. Executing XILINX_SRL pass (Xilinx shift register extraction).

5.35. Executing TECHMAP pass (map to technology primitives).

5.35.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

5.35.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/xilinx/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/xilinx/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_xilinx_lcu'.
Generating RTLIL representation for module `\_80_xilinx_alu'.
Successfully finished Verilog frontend.

5.35.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $dffe.
Using template $paramod$constmap:d79dfd16ca70d4ab7f7875dafcdcec53c6c0f49b$paramod$c1526501edf7c8493cba18b7a5a1ae754201fdff\_90_shift_shiftx for cells of type $shiftx.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $mux.
No more expansions possible.
<suppressed ~257 debug messages>

5.36. Executing OPT pass (performing simple optimizations).

5.36.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir8.
Optimizing module fir8_wrapper.
Optimizing module fir_pe.

5.36.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir8'.
Finding identical cells in module `\fir8_wrapper'.
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

5.36.3. Executing OPT_DFF pass (perform DFF optimizations).

5.36.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir8..
Finding unused cells or wires in module \fir8_wrapper..
Finding unused cells or wires in module \fir_pe..
Removed 42 unused cells and 12 unused wires.
<suppressed ~44 debug messages>

5.36.5. Finished fast OPT passes.

5.37. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port fir8_wrapper.Addr_emu using IBUF.
Mapping port fir8_wrapper.Din_emu using IBUF.
Mapping port fir8_wrapper.Dout_emu using OBUF.
Mapping port fir8_wrapper.clk_dut using IBUF.
Mapping port fir8_wrapper.clk_emu using IBUF.
Mapping port fir8_wrapper.get_emu using IBUF.
Mapping port fir8_wrapper.load_emu using IBUF.

5.38. Executing TECHMAP pass (map to technology primitives).

5.38.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

5.38.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/xilinx/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/xilinx/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$__SHREG_'.
Generating RTLIL representation for module `\$__XILINX_SHREG_'.
Generating RTLIL representation for module `\$__XILINX_MUXF78'.
Successfully finished Verilog frontend.

5.38.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~78 debug messages>

5.39. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

5.40. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir8.
Optimizing module fir8_wrapper.
<suppressed ~8 debug messages>
Optimizing module fir_pe.

5.41. Executing ABC pass (technology mapping using ABC).

5.41.1. Extracting gate netlist of module `\fir8' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

5.41.2. Extracting gate netlist of module `\fir8_wrapper' to `<abc-temp-dir>/input.blif'..
Extracted 29 gates and 58 wires to a netlist network with 28 inputs and 13 outputs.

5.41.2.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + write_blif <abc-temp-dir>/output.blif 

5.41.2.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       13
ABC RESULTS:        internal signals:       17
ABC RESULTS:           input signals:       28
ABC RESULTS:          output signals:       13
Removing temp directory.

5.41.3. Extracting gate netlist of module `\fir_pe' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.
Removed 0 unused cells and 49 unused wires.

5.42. Executing TECHMAP pass (map to technology primitives).

5.42.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/xilinx/ff_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/xilinx/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_SDFFE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFE_PP1P_'.
Generating RTLIL representation for module `\$_DLATCH_NP0_'.
Generating RTLIL representation for module `\$_DLATCH_PP0_'.
Generating RTLIL representation for module `\$_DLATCH_NP1_'.
Generating RTLIL representation for module `\$_DLATCH_PP1_'.
Generating RTLIL representation for module `\$_DLATCH_NPP_'.
Generating RTLIL representation for module `\$_DLATCH_PPP_'.
Successfully finished Verilog frontend.

5.42.2. Continuing TECHMAP pass.
Using template $paramod\$_SDFFE_PP0P_\_TECHMAP_WIREINIT_Q_=1'x for cells of type $_SDFFE_PP0P_.
No more expansions possible.
<suppressed ~117 debug messages>

5.43. Executing XILINX_SRL pass (Xilinx shift register extraction).

5.44. Executing TECHMAP pass (map to technology primitives).

5.44.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/xilinx/lut_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/xilinx/lut_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

5.44.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/xilinx/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/xilinx/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$__SHREG_'.
Generating RTLIL representation for module `\$__XILINX_SHREG_'.
Generating RTLIL representation for module `\$__XILINX_MUXF78'.
Successfully finished Verilog frontend.

5.44.3. Continuing TECHMAP pass.
Using template $paramod$658b9ed803f0d3d335616d3858b53e0a2522f1e8\$lut for cells of type $lut.
Using template $paramod$478e33feeac3aa53ff57d491aada044b8aedceae\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0100 for cells of type $lut.
Using template $paramod$af763bca85949884aefa417266a961f9c91132de\$lut for cells of type $lut.
Using template $paramod$6e238df02989b317f10820a22773676e71120644\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0001 for cells of type $lut.
No more expansions possible.
<suppressed ~97 debug messages>

5.45. Executing XILINX_DFFOPT pass (optimize FF control signal usage).
Optimizing FFs in fir8.
Optimizing FFs in fir8_wrapper.
Optimizing FFs in fir_pe.

5.46. Executing OPT_LUT_INS pass (discard unused LUT inputs).
Optimizing LUTs in fir8.
Optimizing LUTs in fir8_wrapper.
Optimizing LUTs in fir_pe.

5.47. Executing CLKBUFMAP pass (inserting clock buffers).
Inserting BUFG on fir8_wrapper.$iopadmap$clk_dut[0].
Inserting BUFG on fir8_wrapper.$iopadmap$clk_emu[0].
Removed 0 unused cells and 557 unused wires.

5.48. Executing HIERARCHY pass (managing design hierarchy).
Attribute `top' found on module `fir8_wrapper'. Setting top module to fir8_wrapper.

5.48.1. Analyzing design hierarchy..
Top module:  \fir8_wrapper
Used module:     \fir8
Used module:         \fir_pe

5.48.2. Analyzing design hierarchy..
Top module:  \fir8_wrapper
Used module:     \fir8
Used module:         \fir_pe
Removed 0 unused modules.

5.49. Printing statistics.

=== fir8 ===

   Number of wires:                 31
   Number of wire bits:            329
   Number of public wires:          31
   Number of public wire bits:     329
   Number of ports:                  5
   Number of port bits:             49
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     fir_pe                          8

   Estimated number of LCs:          0

=== fir8_wrapper ===

   Number of wires:                 31
   Number of wire bits:            159
   Number of public wires:          17
   Number of public wire bits:     119
   Number of ports:                  7
   Number of port bits:             23
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                119
     BUFG                            2
     FDRE                           80
     IBUF                           15
     LUT2                            2
     LUT4                            3
     LUT5                            8
     OBUF                            8
     fir8                            1

   Estimated number of LCs:         11

=== fir_pe ===

   Number of wires:                  7
   Number of wire bits:             89
   Number of public wires:           6
   Number of public wire bits:      57
   Number of ports:                  6
   Number of port bits:             57
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  9
     DSP48E1                         1
     FDRE                            8

   Estimated number of LCs:          0

=== design hierarchy ===

   fir8_wrapper                      1
     fir8                            1
       fir_pe                        8

   Number of wires:                118
   Number of wire bits:           1200
   Number of public wires:          96
   Number of public wire bits:     904
   Number of ports:                 60
   Number of port bits:            528
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                190
     BUFG                            2
     DSP48E1                         8
     FDRE                          144
     IBUF                           15
     LUT2                            2
     LUT4                            3
     LUT5                            8
     OBUF                            8

   Estimated number of LCs:         11

5.50. Executing CHECK pass (checking for obvious problems).
Checking module fir8...
Checking module fir8_wrapper...
Checking module fir_pe...
Found and reported 0 problems.

6. Executing Verilog backend.

6.1. Executing BMUXMAP pass.

6.2. Executing DEMUXMAP pass.
Dumping module `\fir8'.
Dumping module `\fir8_wrapper'.
Dumping module `\fir_pe'.

7. Printing statistics.

=== fir8 ===

   Number of wires:                 31
   Number of wire bits:            329
   Number of public wires:          31
   Number of public wire bits:     329
   Number of ports:                  5
   Number of port bits:             49
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     fir_pe                          8

=== fir8_wrapper ===

   Number of wires:                 31
   Number of wire bits:            159
   Number of public wires:          17
   Number of public wire bits:     119
   Number of ports:                  7
   Number of port bits:             23
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                119
     BUFG                            2
     FDRE                           80
     IBUF                           15
     LUT2                            2
     LUT4                            3
     LUT5                            8
     OBUF                            8
     fir8                            1

=== fir_pe ===

   Number of wires:                  7
   Number of wire bits:             89
   Number of public wires:           6
   Number of public wire bits:      57
   Number of ports:                  6
   Number of port bits:             57
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  9
     DSP48E1                         1
     FDRE                            8

=== design hierarchy ===

   fir8_wrapper                      1
     fir8                            1
       fir_pe                        8

   Number of wires:                118
   Number of wire bits:           1200
   Number of public wires:          96
   Number of public wire bits:     904
   Number of ports:                 60
   Number of port bits:            528
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                190
     BUFG                            2
     DSP48E1                         8
     FDRE                          144
     IBUF                           15
     LUT2                            2
     LUT4                            3
     LUT5                            8
     OBUF                            8

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 149a8c085b, CPU: user 4.80s system 0.06s, MEM: 127.55 MB peak
Yosys 0.52+63 (git sha1 7f7ad87b7, clang++ 18.1.3 -fPIC -O3)
Time spent: 70% 23x read_verilog (3 sec), 7% 18x opt_clean (0 sec), ...
